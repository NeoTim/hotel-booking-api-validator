// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1.proto

package ext_travel_booking_partner_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// List of credit card types,
type CardType int32

const (
	CardType_AX CardType = 0
	CardType_DC CardType = 1
	CardType_DS CardType = 2
	CardType_JC CardType = 3
	CardType_MC CardType = 4
	CardType_VI CardType = 5
)

var CardType_name = map[int32]string{
	0: "AX",
	1: "DC",
	2: "DS",
	3: "JC",
	4: "MC",
	5: "VI",
}

var CardType_value = map[string]int32{
	"AX": 0,
	"DC": 1,
	"DS": 2,
	"JC": 3,
	"MC": 4,
	"VI": 5,
}

func (x CardType) String() string {
	return proto.EnumName(CardType_name, int32(x))
}

func (CardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{0}
}

// List of available forms of guaranteeing a reservation.
type GuaranteeType int32

const (
	// Payment information is not required at the time of booking.
	GuaranteeType_NO_GUARANTEE GuaranteeType = 0
	// The user provides a credit or debit card when booking the reservation.
	GuaranteeType_PAYMENT_CARD GuaranteeType = 1
)

var GuaranteeType_name = map[int32]string{
	0: "NO_GUARANTEE",
	1: "PAYMENT_CARD",
}

var GuaranteeType_value = map[string]int32{
	"NO_GUARANTEE": 0,
	"PAYMENT_CARD": 1,
}

func (x GuaranteeType) String() string {
	return proto.EnumName(GuaranteeType_name, int32(x))
}

func (GuaranteeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{1}
}

type BookingAvailabilityRequest_DeviceType int32

const (
	BookingAvailabilityRequest_UNKNOWN_DEVICE_TYPE BookingAvailabilityRequest_DeviceType = 0
	BookingAvailabilityRequest_DESKTOP             BookingAvailabilityRequest_DeviceType = 1
	BookingAvailabilityRequest_MOBILE              BookingAvailabilityRequest_DeviceType = 2
	BookingAvailabilityRequest_TABLET              BookingAvailabilityRequest_DeviceType = 3
)

var BookingAvailabilityRequest_DeviceType_name = map[int32]string{
	0: "UNKNOWN_DEVICE_TYPE",
	1: "DESKTOP",
	2: "MOBILE",
	3: "TABLET",
}

var BookingAvailabilityRequest_DeviceType_value = map[string]int32{
	"UNKNOWN_DEVICE_TYPE": 0,
	"DESKTOP":             1,
	"MOBILE":              2,
	"TABLET":              3,
}

func (x BookingAvailabilityRequest_DeviceType) String() string {
	return proto.EnumName(BookingAvailabilityRequest_DeviceType_name, int32(x))
}

func (BookingAvailabilityRequest_DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{0, 0}
}

type BookingSubmitResponse_Status int32

const (
	BookingSubmitResponse_SUCCESS BookingSubmitResponse_Status = 0
	BookingSubmitResponse_FAILURE BookingSubmitResponse_Status = 1
)

var BookingSubmitResponse_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}

var BookingSubmitResponse_Status_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x BookingSubmitResponse_Status) String() string {
	return proto.EnumName(BookingSubmitResponse_Status_name, int32(x))
}

func (BookingSubmitResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{3, 0}
}

type AvailabilityError_AvailabilityErrorType int32

const (
	// Error type is unknown.
	AvailabilityError_UNKNOWN_ERROR AvailabilityError_AvailabilityErrorType = 0
	// API version specified in the request is not supported by the server.
	AvailabilityError_API_VERSION_UNSUPPORTED AvailabilityError_AvailabilityErrorType = 1
	// Specified dates are invalid or in the past.
	AvailabilityError_DATE_SELECTION_INVALID AvailabilityError_AvailabilityErrorType = 2
	// A hotel with the specified ID could not be found.
	AvailabilityError_HOTEL_NOT_FOUND AvailabilityError_AvailabilityErrorType = 3
	// Network error while communicating with a third-party system.
	AvailabilityError_NETWORK_ERROR AvailabilityError_AvailabilityErrorType = 4
	// Service is temporarily unavailable.
	AvailabilityError_RECOVERABLE_ERROR AvailabilityError_AvailabilityErrorType = 5
	// Request contains a field with data in an invalid format.
	AvailabilityError_REQUEST_DATA_INVALID AvailabilityError_AvailabilityErrorType = 6
	// Request is missing a required field.
	AvailabilityError_REQUEST_INCOMPLETE AvailabilityError_AvailabilityErrorType = 7
	// Request cannot be parsed other than a field containing data in an invalid
	// format or missing a required field.
	AvailabilityError_REQUEST_NOT_PARSABLE AvailabilityError_AvailabilityErrorType = 8
	// Error returned by a supplier system that does not fit into a recognized
	// error type.
	AvailabilityError_SUPPLIER_ERROR AvailabilityError_AvailabilityErrorType = 9
)

var AvailabilityError_AvailabilityErrorType_name = map[int32]string{
	0: "UNKNOWN_ERROR",
	1: "API_VERSION_UNSUPPORTED",
	2: "DATE_SELECTION_INVALID",
	3: "HOTEL_NOT_FOUND",
	4: "NETWORK_ERROR",
	5: "RECOVERABLE_ERROR",
	6: "REQUEST_DATA_INVALID",
	7: "REQUEST_INCOMPLETE",
	8: "REQUEST_NOT_PARSABLE",
	9: "SUPPLIER_ERROR",
}

var AvailabilityError_AvailabilityErrorType_value = map[string]int32{
	"UNKNOWN_ERROR":           0,
	"API_VERSION_UNSUPPORTED": 1,
	"DATE_SELECTION_INVALID":  2,
	"HOTEL_NOT_FOUND":         3,
	"NETWORK_ERROR":           4,
	"RECOVERABLE_ERROR":       5,
	"REQUEST_DATA_INVALID":    6,
	"REQUEST_INCOMPLETE":      7,
	"REQUEST_NOT_PARSABLE":    8,
	"SUPPLIER_ERROR":          9,
}

func (x AvailabilityError_AvailabilityErrorType) String() string {
	return proto.EnumName(AvailabilityError_AvailabilityErrorType_name, int32(x))
}

func (AvailabilityError_AvailabilityErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{4, 0}
}

type CancellationPolicy_CancellationSummary int32

const (
	// Cancellation policy is unknown.
	CancellationPolicy_UNKNOWN_CANCELLATION_POLICY CancellationPolicy_CancellationSummary = 0
	// There is a period of time during which the reservation can be canceled
	// without penalty.
	CancellationPolicy_FREE_CANCELLATION CancellationPolicy_CancellationSummary = 1
	// There is no period of time during which the reservation can be canceled
	// with a penalty less than the total amount paid.
	CancellationPolicy_NON_REFUNDABLE CancellationPolicy_CancellationSummary = 2
	// There is no period of time during which the reservation can be canceled
	// without penalty, but there is a period of time during which it can be
	// canceled with a penalty less than the total amount paid.
	CancellationPolicy_PARTIAL_REFUND CancellationPolicy_CancellationSummary = 3
)

var CancellationPolicy_CancellationSummary_name = map[int32]string{
	0: "UNKNOWN_CANCELLATION_POLICY",
	1: "FREE_CANCELLATION",
	2: "NON_REFUNDABLE",
	3: "PARTIAL_REFUND",
}

var CancellationPolicy_CancellationSummary_value = map[string]int32{
	"UNKNOWN_CANCELLATION_POLICY": 0,
	"FREE_CANCELLATION":           1,
	"NON_REFUNDABLE":              2,
	"PARTIAL_REFUND":              3,
}

func (x CancellationPolicy_CancellationSummary) String() string {
	return proto.EnumName(CancellationPolicy_CancellationSummary_name, int32(x))
}

func (CancellationPolicy_CancellationSummary) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{7, 0}
}

type RoomRate_LineItem_LineItemType int32

const (
	// Base room rate.
	RoomRate_LineItem_BASE_RATE RoomRate_LineItem_LineItemType = 0
	// Taxes and/or fees that cannot be separated or are of an unknown type.
	RoomRate_LineItem_UNKNOWN_TAXES_AND_FEES RoomRate_LineItem_LineItemType = 1
	// Taxes that cannot be separated or of an unknown type.
	RoomRate_LineItem_UNKNOWN_TAXES RoomRate_LineItem_LineItemType = 2
	// Tax applied by a city or municipality, such as a sales or tourism tax.
	RoomRate_LineItem_TAX_MUNICIPAL RoomRate_LineItem_LineItemType = 3
	// VAT or GST.
	RoomRate_LineItem_TAX_VAT RoomRate_LineItem_LineItemType = 4
	// Tax that does not fall into another defined type.
	RoomRate_LineItem_TAX_OTHER RoomRate_LineItem_LineItemType = 5
	// Fees that cannot be separated or of an unknown type.
	RoomRate_LineItem_UNKNOWN_FEES RoomRate_LineItem_LineItemType = 6
	// Fee applied by the advertiser or booking partner.
	RoomRate_LineItem_FEE_BOOKING RoomRate_LineItem_LineItemType = 7
	// Fee applied by the hotel that does not fall into another defined type.
	RoomRate_LineItem_FEE_HOTEL RoomRate_LineItem_LineItemType = 8
	// Fee applied by the hotel for resort-type accommodations or other
	// amenities.
	RoomRate_LineItem_FEE_RESORT RoomRate_LineItem_LineItemType = 9
	// Fee applied by the hotel for transportation, such as transfers or
	// connections.
	RoomRate_LineItem_FEE_TRANSFER RoomRate_LineItem_LineItemType = 10
	// Fee that does not fall into another defined type.
	RoomRate_LineItem_FEE_OTHER RoomRate_LineItem_LineItemType = 11
)

var RoomRate_LineItem_LineItemType_name = map[int32]string{
	0:  "BASE_RATE",
	1:  "UNKNOWN_TAXES_AND_FEES",
	2:  "UNKNOWN_TAXES",
	3:  "TAX_MUNICIPAL",
	4:  "TAX_VAT",
	5:  "TAX_OTHER",
	6:  "UNKNOWN_FEES",
	7:  "FEE_BOOKING",
	8:  "FEE_HOTEL",
	9:  "FEE_RESORT",
	10: "FEE_TRANSFER",
	11: "FEE_OTHER",
}

var RoomRate_LineItem_LineItemType_value = map[string]int32{
	"BASE_RATE":              0,
	"UNKNOWN_TAXES_AND_FEES": 1,
	"UNKNOWN_TAXES":          2,
	"TAX_MUNICIPAL":          3,
	"TAX_VAT":                4,
	"TAX_OTHER":              5,
	"UNKNOWN_FEES":           6,
	"FEE_BOOKING":            7,
	"FEE_HOTEL":              8,
	"FEE_RESORT":             9,
	"FEE_TRANSFER":           10,
	"FEE_OTHER":              11,
}

func (x RoomRate_LineItem_LineItemType) String() string {
	return proto.EnumName(RoomRate_LineItem_LineItemType_name, int32(x))
}

func (RoomRate_LineItem_LineItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{17, 0, 0}
}

type SubmitError_SubmitErrorType int32

const (
	// error type is unknown.
	SubmitError_UNKNOWN_ERROR SubmitError_SubmitErrorType = 0
	// API version specified in the request is not supported by the server.
	SubmitError_API_VERSION_UNSUPPORTED SubmitError_SubmitErrorType = 1
	// the partner or hotel cannot support this booking as it is too close to
	// the check-in date or time.
	SubmitError_CHECKIN_TOO_CLOSE SubmitError_SubmitErrorType = 2
	// the customer name is invalid.
	SubmitError_CUSTOMER_NAME_INVALID SubmitError_SubmitErrorType = 3
	// specified dates are invalid or in the past.
	SubmitError_DATE_SELECTION_INVALID SubmitError_SubmitErrorType = 4
	// the booking appears to be a duplicate of an existing reservation.
	SubmitError_DUPLICATE_BOOKING SubmitError_SubmitErrorType = 5
	// a hotel with the specified ID could not be found.
	SubmitError_HOTEL_NOT_FOUND SubmitError_SubmitErrorType = 6
	// network error while communicating with a third-party system.
	SubmitError_NETWORK_ERROR SubmitError_SubmitErrorType = 7
	// billing address invalid or missing information.
	SubmitError_PAYMENT_BILLING_ADDRESS_INVALID SubmitError_SubmitErrorType = 8
	// payment card cardholder name is invalid.
	SubmitError_PAYMENT_CARD_CARDHOLDER_NAME_INVALID SubmitError_SubmitErrorType = 9
	// payment card CVC is missing or invalid.
	SubmitError_PAYMENT_CARD_CVC_INVALID SubmitError_SubmitErrorType = 10
	// payment card expiration date is invalid or has expired.
	SubmitError_PAYMENT_CARD_EXPIRATION_INVALID SubmitError_SubmitErrorType = 11
	// payment card number is not valid for the card type.
	SubmitError_PAYMENT_CARD_NUMBER_INVALID SubmitError_SubmitErrorType = 12
	// payment card type is unrecognized or not supported for this reservation.
	SubmitError_PAYMENT_CARD_TYPE_NOT_SUPPORTED SubmitError_SubmitErrorType = 13
	// payment declined by the processor or by partner risk assessment.
	SubmitError_PAYMENT_DECLINED SubmitError_SubmitErrorType = 14
	// error processing the payment that does not fit into a recognized error
	// type.
	SubmitError_PAYMENT_INVALID SubmitError_SubmitErrorType = 15
	// payment does not have sufficient funds or credit to cover the
	// transaction.
	SubmitError_PAYMENT_INSUFFICIENT SubmitError_SubmitErrorType = 16
	// error returned by a payment processor that does not fit into a recognized
	// error type.
	SubmitError_PAYMENT_PROCESSOR_ERROR SubmitError_SubmitErrorType = 17
	// payment type is unrecognized or not accepted for this reservation.
	SubmitError_PAYMENT_TYPE_NOT_ACCEPTED SubmitError_SubmitErrorType = 18
	// rate plan code is unrecognized or not available.
	SubmitError_RATE_PLAN_UNAVAILABLE SubmitError_SubmitErrorType = 19
	// service is temporarily unavailable.
	SubmitError_RECOVERABLE_ERROR SubmitError_SubmitErrorType = 20
	// request contains a field with data in an invalid format.
	SubmitError_REQUEST_DATA_INVALID SubmitError_SubmitErrorType = 21
	// request is missing a required field.
	SubmitError_REQUEST_INCOMPLETE SubmitError_SubmitErrorType = 22
	// request cannot be parsed other than a field containing data in an invalid
	// format or missing a required field.
	SubmitError_REQUEST_NOT_PARSABLE SubmitError_SubmitErrorType = 23
	// room rate details are invalid or out of date other than pricing.
	SubmitError_ROOM_RATE_MISMATCH SubmitError_SubmitErrorType = 24
	// room rate pricing details are out of date.
	SubmitError_ROOM_RATE_PRICE_MISMATCH SubmitError_SubmitErrorType = 25
	// room rate code is unrecognized or not available.
	SubmitError_ROOM_RATE_UNAVAILABLE SubmitError_SubmitErrorType = 26
	// room type code is unrecognized or not available.
	SubmitError_ROOM_TYPE_UNAVAILABLE SubmitError_SubmitErrorType = 27
	// the traveler name is invalid.
	SubmitError_TRAVELER_NAME_INVALID SubmitError_SubmitErrorType = 28
	// error returned by a supplier system that does not fit into a recognized
	// error type.
	SubmitError_SUPPLIER_ERROR SubmitError_SubmitErrorType = 29
)

var SubmitError_SubmitErrorType_name = map[int32]string{
	0:  "UNKNOWN_ERROR",
	1:  "API_VERSION_UNSUPPORTED",
	2:  "CHECKIN_TOO_CLOSE",
	3:  "CUSTOMER_NAME_INVALID",
	4:  "DATE_SELECTION_INVALID",
	5:  "DUPLICATE_BOOKING",
	6:  "HOTEL_NOT_FOUND",
	7:  "NETWORK_ERROR",
	8:  "PAYMENT_BILLING_ADDRESS_INVALID",
	9:  "PAYMENT_CARD_CARDHOLDER_NAME_INVALID",
	10: "PAYMENT_CARD_CVC_INVALID",
	11: "PAYMENT_CARD_EXPIRATION_INVALID",
	12: "PAYMENT_CARD_NUMBER_INVALID",
	13: "PAYMENT_CARD_TYPE_NOT_SUPPORTED",
	14: "PAYMENT_DECLINED",
	15: "PAYMENT_INVALID",
	16: "PAYMENT_INSUFFICIENT",
	17: "PAYMENT_PROCESSOR_ERROR",
	18: "PAYMENT_TYPE_NOT_ACCEPTED",
	19: "RATE_PLAN_UNAVAILABLE",
	20: "RECOVERABLE_ERROR",
	21: "REQUEST_DATA_INVALID",
	22: "REQUEST_INCOMPLETE",
	23: "REQUEST_NOT_PARSABLE",
	24: "ROOM_RATE_MISMATCH",
	25: "ROOM_RATE_PRICE_MISMATCH",
	26: "ROOM_RATE_UNAVAILABLE",
	27: "ROOM_TYPE_UNAVAILABLE",
	28: "TRAVELER_NAME_INVALID",
	29: "SUPPLIER_ERROR",
}

var SubmitError_SubmitErrorType_value = map[string]int32{
	"UNKNOWN_ERROR":                        0,
	"API_VERSION_UNSUPPORTED":              1,
	"CHECKIN_TOO_CLOSE":                    2,
	"CUSTOMER_NAME_INVALID":                3,
	"DATE_SELECTION_INVALID":               4,
	"DUPLICATE_BOOKING":                    5,
	"HOTEL_NOT_FOUND":                      6,
	"NETWORK_ERROR":                        7,
	"PAYMENT_BILLING_ADDRESS_INVALID":      8,
	"PAYMENT_CARD_CARDHOLDER_NAME_INVALID": 9,
	"PAYMENT_CARD_CVC_INVALID":             10,
	"PAYMENT_CARD_EXPIRATION_INVALID":      11,
	"PAYMENT_CARD_NUMBER_INVALID":          12,
	"PAYMENT_CARD_TYPE_NOT_SUPPORTED":      13,
	"PAYMENT_DECLINED":                     14,
	"PAYMENT_INVALID":                      15,
	"PAYMENT_INSUFFICIENT":                 16,
	"PAYMENT_PROCESSOR_ERROR":              17,
	"PAYMENT_TYPE_NOT_ACCEPTED":            18,
	"RATE_PLAN_UNAVAILABLE":                19,
	"RECOVERABLE_ERROR":                    20,
	"REQUEST_DATA_INVALID":                 21,
	"REQUEST_INCOMPLETE":                   22,
	"REQUEST_NOT_PARSABLE":                 23,
	"ROOM_RATE_MISMATCH":                   24,
	"ROOM_RATE_PRICE_MISMATCH":             25,
	"ROOM_RATE_UNAVAILABLE":                26,
	"ROOM_TYPE_UNAVAILABLE":                27,
	"TRAVELER_NAME_INVALID":                28,
	"SUPPLIER_ERROR":                       29,
}

func (x SubmitError_SubmitErrorType) String() string {
	return proto.EnumName(SubmitError_SubmitErrorType_name, int32(x))
}

func (SubmitError_SubmitErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{19, 0}
}

// Request to check availability for the given search criteria.
type BookingAvailabilityRequest struct {
	// The version number of the api spec used. (required)
	ApiVersion int32 `protobuf:"varint,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Unique ID for the request. (required)
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Tracking parameters. (optional)
	Tracking *Tracking `protobuf:"bytes,3,opt,name=tracking,proto3" json:"tracking,omitempty"`
	// Partner hotel ID. (required)
	HotelId string `protobuf:"bytes,4,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	// Check-in date (format YYYY-MM-DD). (required)
	StartDate string `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Check-out date (format YYYY-MM-DD). (required)
	EndDate string `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Number of adult guests and children by age in years for a single room.
	// (required)
	Party *Occupancy `protobuf:"bytes,7,opt,name=party,proto3" json:"party,omitempty"`
	// The BCP-47 language tag identifying the language expected in the response.
	// (required)
	Language string `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	// ISO 4217 currency code for the currency expected in the response.
	// (required)
	Currency string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	// The ISO 3166 country code identified by the originating user request.
	// (optional)
	UserCountry string `protobuf:"bytes,10,opt,name=user_country,json=userCountry,proto3" json:"user_country,omitempty"`
	// DeviceType used to issue the request. (optional)
	DeviceType           BookingAvailabilityRequest_DeviceType `protobuf:"varint,11,opt,name=device_type,json=deviceType,proto3,enum=ext.travel.booking.partner.v1.BookingAvailabilityRequest_DeviceType" json:"device_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *BookingAvailabilityRequest) Reset()         { *m = BookingAvailabilityRequest{} }
func (m *BookingAvailabilityRequest) String() string { return proto.CompactTextString(m) }
func (*BookingAvailabilityRequest) ProtoMessage()    {}
func (*BookingAvailabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{0}
}

func (m *BookingAvailabilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookingAvailabilityRequest.Unmarshal(m, b)
}
func (m *BookingAvailabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookingAvailabilityRequest.Marshal(b, m, deterministic)
}
func (m *BookingAvailabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookingAvailabilityRequest.Merge(m, src)
}
func (m *BookingAvailabilityRequest) XXX_Size() int {
	return xxx_messageInfo_BookingAvailabilityRequest.Size(m)
}
func (m *BookingAvailabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BookingAvailabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BookingAvailabilityRequest proto.InternalMessageInfo

func (m *BookingAvailabilityRequest) GetApiVersion() int32 {
	if m != nil {
		return m.ApiVersion
	}
	return 0
}

func (m *BookingAvailabilityRequest) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *BookingAvailabilityRequest) GetTracking() *Tracking {
	if m != nil {
		return m.Tracking
	}
	return nil
}

func (m *BookingAvailabilityRequest) GetHotelId() string {
	if m != nil {
		return m.HotelId
	}
	return ""
}

func (m *BookingAvailabilityRequest) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *BookingAvailabilityRequest) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *BookingAvailabilityRequest) GetParty() *Occupancy {
	if m != nil {
		return m.Party
	}
	return nil
}

func (m *BookingAvailabilityRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *BookingAvailabilityRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *BookingAvailabilityRequest) GetUserCountry() string {
	if m != nil {
		return m.UserCountry
	}
	return ""
}

func (m *BookingAvailabilityRequest) GetDeviceType() BookingAvailabilityRequest_DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return BookingAvailabilityRequest_UNKNOWN_DEVICE_TYPE
}

// Response with hotel availability for the given search criteria.
type BookingAvailabilityResponse struct {
	// The version of the api spec used, ex 1. (required)
	ApiVersion int32 `protobuf:"varint,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Echo unique ID for the request. (required)
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Echo partner hotel ID. (required)
	HotelId string `protobuf:"bytes,3,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	// Echo check-in date (format YYYY-MM-DD). (required)
	StartDate string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Echo check-out date (format YYYY-MM-DD). (required)
	EndDate string `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Echo number of adult guests and children by age in years. (required)
	Party *Occupancy `protobuf:"bytes,6,opt,name=party,proto3" json:"party,omitempty"`
	// The list of room types that match the search criteria. (required)
	RoomTypes []*RoomType `protobuf:"bytes,7,rep,name=room_types,json=roomTypes,proto3" json:"room_types,omitempty"`
	// The list of rate plans that match the search criteria. (required)
	RatePlans []*RatePlan `protobuf:"bytes,8,rep,name=rate_plans,json=ratePlans,proto3" json:"rate_plans,omitempty"`
	// The list of room rates that match the search criteria; (required)
	RoomRates []*RoomRate `protobuf:"bytes,9,rep,name=room_rates,json=roomRates,proto3" json:"room_rates,omitempty"`
	// The hotel details. (required, unless error)
	HotelDetails *HotelDetails `protobuf:"bytes,10,opt,name=hotel_details,json=hotelDetails,proto3" json:"hotel_details,omitempty"`
	// Partner policy details. (optional)
	Policies *PartnerPolicies `protobuf:"bytes,11,opt,name=policies,proto3" json:"policies,omitempty"`
	// Error details if the request was not successful. (optional)
	Error                *AvailabilityError `protobuf:"bytes,12,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BookingAvailabilityResponse) Reset()         { *m = BookingAvailabilityResponse{} }
func (m *BookingAvailabilityResponse) String() string { return proto.CompactTextString(m) }
func (*BookingAvailabilityResponse) ProtoMessage()    {}
func (*BookingAvailabilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{1}
}

func (m *BookingAvailabilityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookingAvailabilityResponse.Unmarshal(m, b)
}
func (m *BookingAvailabilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookingAvailabilityResponse.Marshal(b, m, deterministic)
}
func (m *BookingAvailabilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookingAvailabilityResponse.Merge(m, src)
}
func (m *BookingAvailabilityResponse) XXX_Size() int {
	return xxx_messageInfo_BookingAvailabilityResponse.Size(m)
}
func (m *BookingAvailabilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BookingAvailabilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BookingAvailabilityResponse proto.InternalMessageInfo

func (m *BookingAvailabilityResponse) GetApiVersion() int32 {
	if m != nil {
		return m.ApiVersion
	}
	return 0
}

func (m *BookingAvailabilityResponse) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *BookingAvailabilityResponse) GetHotelId() string {
	if m != nil {
		return m.HotelId
	}
	return ""
}

func (m *BookingAvailabilityResponse) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *BookingAvailabilityResponse) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *BookingAvailabilityResponse) GetParty() *Occupancy {
	if m != nil {
		return m.Party
	}
	return nil
}

func (m *BookingAvailabilityResponse) GetRoomTypes() []*RoomType {
	if m != nil {
		return m.RoomTypes
	}
	return nil
}

func (m *BookingAvailabilityResponse) GetRatePlans() []*RatePlan {
	if m != nil {
		return m.RatePlans
	}
	return nil
}

func (m *BookingAvailabilityResponse) GetRoomRates() []*RoomRate {
	if m != nil {
		return m.RoomRates
	}
	return nil
}

func (m *BookingAvailabilityResponse) GetHotelDetails() *HotelDetails {
	if m != nil {
		return m.HotelDetails
	}
	return nil
}

func (m *BookingAvailabilityResponse) GetPolicies() *PartnerPolicies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *BookingAvailabilityResponse) GetError() *AvailabilityError {
	if m != nil {
		return m.Error
	}
	return nil
}

// Request to book a reservation for given criteria.
type BookingSubmitRequest struct {
	// The version number of the api spec used. (required)
	ApiVersion int32 `protobuf:"varint,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Unique ID for the request. (required)
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Tracking parameters. (optional)
	Tracking *Tracking `protobuf:"bytes,3,opt,name=tracking,proto3" json:"tracking,omitempty"`
	// Partner hotel ID. (required)
	HotelId string `protobuf:"bytes,4,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	// Check-in date (format YYYY-MM-DD). (required)
	StartDate string `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Check-out date (format YYYY-MM-DD). (required)
	EndDate string `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Booking customer's ip addrss. (required)
	IpAddress string `protobuf:"bytes,7,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// The BCP-47 language tag identifying the customer's preferred language
	// (required)
	Language string `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	// Customer details. (required)
	Customer *Customer `protobuf:"bytes,9,opt,name=customer,proto3" json:"customer,omitempty"`
	// Primary traveler details along with party details. (required)
	Traveler *Traveler `protobuf:"bytes,10,opt,name=traveler,proto3" json:"traveler,omitempty"`
	// Room rate details. (required)
	RoomRate *RoomRate `protobuf:"bytes,11,opt,name=room_rate,json=roomRate,proto3" json:"room_rate,omitempty"`
	// Payment details. (required)
	Payment              *BookingSubmitRequest_Payment `protobuf:"bytes,12,opt,name=payment,proto3" json:"payment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *BookingSubmitRequest) Reset()         { *m = BookingSubmitRequest{} }
func (m *BookingSubmitRequest) String() string { return proto.CompactTextString(m) }
func (*BookingSubmitRequest) ProtoMessage()    {}
func (*BookingSubmitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{2}
}

func (m *BookingSubmitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookingSubmitRequest.Unmarshal(m, b)
}
func (m *BookingSubmitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookingSubmitRequest.Marshal(b, m, deterministic)
}
func (m *BookingSubmitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookingSubmitRequest.Merge(m, src)
}
func (m *BookingSubmitRequest) XXX_Size() int {
	return xxx_messageInfo_BookingSubmitRequest.Size(m)
}
func (m *BookingSubmitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BookingSubmitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BookingSubmitRequest proto.InternalMessageInfo

func (m *BookingSubmitRequest) GetApiVersion() int32 {
	if m != nil {
		return m.ApiVersion
	}
	return 0
}

func (m *BookingSubmitRequest) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *BookingSubmitRequest) GetTracking() *Tracking {
	if m != nil {
		return m.Tracking
	}
	return nil
}

func (m *BookingSubmitRequest) GetHotelId() string {
	if m != nil {
		return m.HotelId
	}
	return ""
}

func (m *BookingSubmitRequest) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *BookingSubmitRequest) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *BookingSubmitRequest) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *BookingSubmitRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *BookingSubmitRequest) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *BookingSubmitRequest) GetTraveler() *Traveler {
	if m != nil {
		return m.Traveler
	}
	return nil
}

func (m *BookingSubmitRequest) GetRoomRate() *RoomRate {
	if m != nil {
		return m.RoomRate
	}
	return nil
}

func (m *BookingSubmitRequest) GetPayment() *BookingSubmitRequest_Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type BookingSubmitRequest_Payment struct {
	// Selected guarantee type. (required)
	Type GuaranteeType `protobuf:"varint,1,opt,name=type,proto3,enum=ext.travel.booking.partner.v1.GuaranteeType" json:"type,omitempty"`
	// Detailed credit card information. (required)
	PaymentCardParameters *BookingSubmitRequest_Payment_PaymentCardParameters `protobuf:"bytes,2,opt,name=payment_card_parameters,json=paymentCardParameters,proto3" json:"payment_card_parameters,omitempty"`
	// Billing address associated with the credit card. (required)
	BillingAddress       *Address `protobuf:"bytes,3,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookingSubmitRequest_Payment) Reset()         { *m = BookingSubmitRequest_Payment{} }
func (m *BookingSubmitRequest_Payment) String() string { return proto.CompactTextString(m) }
func (*BookingSubmitRequest_Payment) ProtoMessage()    {}
func (*BookingSubmitRequest_Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{2, 0}
}

func (m *BookingSubmitRequest_Payment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookingSubmitRequest_Payment.Unmarshal(m, b)
}
func (m *BookingSubmitRequest_Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookingSubmitRequest_Payment.Marshal(b, m, deterministic)
}
func (m *BookingSubmitRequest_Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookingSubmitRequest_Payment.Merge(m, src)
}
func (m *BookingSubmitRequest_Payment) XXX_Size() int {
	return xxx_messageInfo_BookingSubmitRequest_Payment.Size(m)
}
func (m *BookingSubmitRequest_Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_BookingSubmitRequest_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_BookingSubmitRequest_Payment proto.InternalMessageInfo

func (m *BookingSubmitRequest_Payment) GetType() GuaranteeType {
	if m != nil {
		return m.Type
	}
	return GuaranteeType_NO_GUARANTEE
}

func (m *BookingSubmitRequest_Payment) GetPaymentCardParameters() *BookingSubmitRequest_Payment_PaymentCardParameters {
	if m != nil {
		return m.PaymentCardParameters
	}
	return nil
}

func (m *BookingSubmitRequest_Payment) GetBillingAddress() *Address {
	if m != nil {
		return m.BillingAddress
	}
	return nil
}

type BookingSubmitRequest_Payment_PaymentCardParameters struct {
	// Type of credit card. (required)
	CardType CardType `protobuf:"varint,1,opt,name=card_type,json=cardType,proto3,enum=ext.travel.booking.partner.v1.CardType" json:"card_type,omitempty"`
	// Credit card number. (required)
	CardNumber string `protobuf:"bytes,2,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	// Name of card holder. (required)
	CardholderName string `protobuf:"bytes,3,opt,name=cardholder_name,json=cardholderName,proto3" json:"cardholder_name,omitempty"`
	// 2-digit month (format MM). (required)
	ExpirationMonth string `protobuf:"bytes,4,opt,name=expiration_month,json=expirationMonth,proto3" json:"expiration_month,omitempty"`
	// 4-digit year (format YYYY)
	ExpirationYear string `protobuf:"bytes,5,opt,name=expiration_year,json=expirationYear,proto3" json:"expiration_year,omitempty"`
	// Card verification code. (required if cvc_required in the CardOption is
	// true)
	Cvc                  string   `protobuf:"bytes,6,opt,name=cvc,proto3" json:"cvc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookingSubmitRequest_Payment_PaymentCardParameters) Reset() {
	*m = BookingSubmitRequest_Payment_PaymentCardParameters{}
}
func (m *BookingSubmitRequest_Payment_PaymentCardParameters) String() string {
	return proto.CompactTextString(m)
}
func (*BookingSubmitRequest_Payment_PaymentCardParameters) ProtoMessage() {}
func (*BookingSubmitRequest_Payment_PaymentCardParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{2, 0, 0}
}

func (m *BookingSubmitRequest_Payment_PaymentCardParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookingSubmitRequest_Payment_PaymentCardParameters.Unmarshal(m, b)
}
func (m *BookingSubmitRequest_Payment_PaymentCardParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookingSubmitRequest_Payment_PaymentCardParameters.Marshal(b, m, deterministic)
}
func (m *BookingSubmitRequest_Payment_PaymentCardParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookingSubmitRequest_Payment_PaymentCardParameters.Merge(m, src)
}
func (m *BookingSubmitRequest_Payment_PaymentCardParameters) XXX_Size() int {
	return xxx_messageInfo_BookingSubmitRequest_Payment_PaymentCardParameters.Size(m)
}
func (m *BookingSubmitRequest_Payment_PaymentCardParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_BookingSubmitRequest_Payment_PaymentCardParameters.DiscardUnknown(m)
}

var xxx_messageInfo_BookingSubmitRequest_Payment_PaymentCardParameters proto.InternalMessageInfo

func (m *BookingSubmitRequest_Payment_PaymentCardParameters) GetCardType() CardType {
	if m != nil {
		return m.CardType
	}
	return CardType_AX
}

func (m *BookingSubmitRequest_Payment_PaymentCardParameters) GetCardNumber() string {
	if m != nil {
		return m.CardNumber
	}
	return ""
}

func (m *BookingSubmitRequest_Payment_PaymentCardParameters) GetCardholderName() string {
	if m != nil {
		return m.CardholderName
	}
	return ""
}

func (m *BookingSubmitRequest_Payment_PaymentCardParameters) GetExpirationMonth() string {
	if m != nil {
		return m.ExpirationMonth
	}
	return ""
}

func (m *BookingSubmitRequest_Payment_PaymentCardParameters) GetExpirationYear() string {
	if m != nil {
		return m.ExpirationYear
	}
	return ""
}

func (m *BookingSubmitRequest_Payment_PaymentCardParameters) GetCvc() string {
	if m != nil {
		return m.Cvc
	}
	return ""
}

// Response confirming the booking reservation or rejection details.
type BookingSubmitResponse struct {
	// The version number of the api spec used. (required)
	ApiVersion int32 `protobuf:"varint,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Unique ID for the request. (required)
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Success or failure status of the booking request. (reqiured)
	Status BookingSubmitResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=ext.travel.booking.partner.v1.BookingSubmitResponse_Status" json:"status,omitempty"`
	// Reservation details. (required)
	Reservation *BookingSubmitResponse_Reservation `protobuf:"bytes,4,opt,name=reservation,proto3" json:"reservation,omitempty"`
	// Error details. (optional)
	Error                *SubmitError `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BookingSubmitResponse) Reset()         { *m = BookingSubmitResponse{} }
func (m *BookingSubmitResponse) String() string { return proto.CompactTextString(m) }
func (*BookingSubmitResponse) ProtoMessage()    {}
func (*BookingSubmitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{3}
}

func (m *BookingSubmitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookingSubmitResponse.Unmarshal(m, b)
}
func (m *BookingSubmitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookingSubmitResponse.Marshal(b, m, deterministic)
}
func (m *BookingSubmitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookingSubmitResponse.Merge(m, src)
}
func (m *BookingSubmitResponse) XXX_Size() int {
	return xxx_messageInfo_BookingSubmitResponse.Size(m)
}
func (m *BookingSubmitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BookingSubmitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BookingSubmitResponse proto.InternalMessageInfo

func (m *BookingSubmitResponse) GetApiVersion() int32 {
	if m != nil {
		return m.ApiVersion
	}
	return 0
}

func (m *BookingSubmitResponse) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *BookingSubmitResponse) GetStatus() BookingSubmitResponse_Status {
	if m != nil {
		return m.Status
	}
	return BookingSubmitResponse_SUCCESS
}

func (m *BookingSubmitResponse) GetReservation() *BookingSubmitResponse_Reservation {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *BookingSubmitResponse) GetError() *SubmitError {
	if m != nil {
		return m.Error
	}
	return nil
}

type BookingSubmitResponse_Reservation struct {
	// Locator in the partner's reservation system. (required unless error)
	Locator *BookingSubmitResponse_Reservation_Locator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator,omitempty"`
	// Locator in the hotel's reservation system, with either one element for
	// the reservation or one element for each room. (optional)
	HotelLocators []*BookingSubmitResponse_Reservation_Locator `protobuf:"bytes,2,rep,name=hotel_locators,json=hotelLocators,proto3" json:"hotel_locators,omitempty"`
	// Partner hotel ID. (required)
	HotelId string `protobuf:"bytes,4,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	// Check-in date (format YYYY-MM-DD). (required)
	StartDate string `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Check-out date (format YYYY-MM-DD). (required)
	EndDate string `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Customer details. (required)
	Customer *Customer `protobuf:"bytes,8,opt,name=customer,proto3" json:"customer,omitempty"`
	// Primary traveler details along with party details. (required)
	Traveler *Traveler `protobuf:"bytes,9,opt,name=traveler,proto3" json:"traveler,omitempty"`
	// Room rate details. (required)
	RoomRate             *RoomRate `protobuf:"bytes,10,opt,name=room_rate,json=roomRate,proto3" json:"room_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BookingSubmitResponse_Reservation) Reset()         { *m = BookingSubmitResponse_Reservation{} }
func (m *BookingSubmitResponse_Reservation) String() string { return proto.CompactTextString(m) }
func (*BookingSubmitResponse_Reservation) ProtoMessage()    {}
func (*BookingSubmitResponse_Reservation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{3, 0}
}

func (m *BookingSubmitResponse_Reservation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookingSubmitResponse_Reservation.Unmarshal(m, b)
}
func (m *BookingSubmitResponse_Reservation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookingSubmitResponse_Reservation.Marshal(b, m, deterministic)
}
func (m *BookingSubmitResponse_Reservation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookingSubmitResponse_Reservation.Merge(m, src)
}
func (m *BookingSubmitResponse_Reservation) XXX_Size() int {
	return xxx_messageInfo_BookingSubmitResponse_Reservation.Size(m)
}
func (m *BookingSubmitResponse_Reservation) XXX_DiscardUnknown() {
	xxx_messageInfo_BookingSubmitResponse_Reservation.DiscardUnknown(m)
}

var xxx_messageInfo_BookingSubmitResponse_Reservation proto.InternalMessageInfo

func (m *BookingSubmitResponse_Reservation) GetLocator() *BookingSubmitResponse_Reservation_Locator {
	if m != nil {
		return m.Locator
	}
	return nil
}

func (m *BookingSubmitResponse_Reservation) GetHotelLocators() []*BookingSubmitResponse_Reservation_Locator {
	if m != nil {
		return m.HotelLocators
	}
	return nil
}

func (m *BookingSubmitResponse_Reservation) GetHotelId() string {
	if m != nil {
		return m.HotelId
	}
	return ""
}

func (m *BookingSubmitResponse_Reservation) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *BookingSubmitResponse_Reservation) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *BookingSubmitResponse_Reservation) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *BookingSubmitResponse_Reservation) GetTraveler() *Traveler {
	if m != nil {
		return m.Traveler
	}
	return nil
}

func (m *BookingSubmitResponse_Reservation) GetRoomRate() *RoomRate {
	if m != nil {
		return m.RoomRate
	}
	return nil
}

type BookingSubmitResponse_Reservation_Locator struct {
	// Unique identifier for the reservation. (required)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Password needed to access the reservation. (optional)
	Pin                  string   `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookingSubmitResponse_Reservation_Locator) Reset() {
	*m = BookingSubmitResponse_Reservation_Locator{}
}
func (m *BookingSubmitResponse_Reservation_Locator) String() string { return proto.CompactTextString(m) }
func (*BookingSubmitResponse_Reservation_Locator) ProtoMessage()    {}
func (*BookingSubmitResponse_Reservation_Locator) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{3, 0, 0}
}

func (m *BookingSubmitResponse_Reservation_Locator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookingSubmitResponse_Reservation_Locator.Unmarshal(m, b)
}
func (m *BookingSubmitResponse_Reservation_Locator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookingSubmitResponse_Reservation_Locator.Marshal(b, m, deterministic)
}
func (m *BookingSubmitResponse_Reservation_Locator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookingSubmitResponse_Reservation_Locator.Merge(m, src)
}
func (m *BookingSubmitResponse_Reservation_Locator) XXX_Size() int {
	return xxx_messageInfo_BookingSubmitResponse_Reservation_Locator.Size(m)
}
func (m *BookingSubmitResponse_Reservation_Locator) XXX_DiscardUnknown() {
	xxx_messageInfo_BookingSubmitResponse_Reservation_Locator.DiscardUnknown(m)
}

var xxx_messageInfo_BookingSubmitResponse_Reservation_Locator proto.InternalMessageInfo

func (m *BookingSubmitResponse_Reservation_Locator) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BookingSubmitResponse_Reservation_Locator) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

// Availability response error details.
type AvailabilityError struct {
	// The type of availability error that was returned. (required)
	Type AvailabilityError_AvailabilityErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=ext.travel.booking.partner.v1.AvailabilityError_AvailabilityErrorType" json:"type,omitempty"`
	// Detailed description of the error for debugging purposes. (required)
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailabilityError) Reset()         { *m = AvailabilityError{} }
func (m *AvailabilityError) String() string { return proto.CompactTextString(m) }
func (*AvailabilityError) ProtoMessage()    {}
func (*AvailabilityError) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{4}
}

func (m *AvailabilityError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvailabilityError.Unmarshal(m, b)
}
func (m *AvailabilityError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvailabilityError.Marshal(b, m, deterministic)
}
func (m *AvailabilityError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailabilityError.Merge(m, src)
}
func (m *AvailabilityError) XXX_Size() int {
	return xxx_messageInfo_AvailabilityError.Size(m)
}
func (m *AvailabilityError) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailabilityError.DiscardUnknown(m)
}

var xxx_messageInfo_AvailabilityError proto.InternalMessageInfo

func (m *AvailabilityError) GetType() AvailabilityError_AvailabilityErrorType {
	if m != nil {
		return m.Type
	}
	return AvailabilityError_UNKNOWN_ERROR
}

func (m *AvailabilityError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Address definition.
type Address struct {
	// Primary street address. (required)
	Address1 string `protobuf:"bytes,1,opt,name=address1,proto3" json:"address1,omitempty"`
	// Secondary street address, if needed. (optional)
	Address2 string `protobuf:"bytes,2,opt,name=address2,proto3" json:"address2,omitempty"`
	// Third portion of the street address, if necessary. (optional)
	Address3 string `protobuf:"bytes,3,opt,name=address3,proto3" json:"address3,omitempty"`
	// Name of the city. (required)
	City string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	// Name of  the state, region or province. (required)
	Province string `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	// Postal code. (required)
	PostalCode string `protobuf:"bytes,6,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// The ISO 3166 country code identified by the originating user request.
	// (optional)
	Country              string   `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{5}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress1() string {
	if m != nil {
		return m.Address1
	}
	return ""
}

func (m *Address) GetAddress2() string {
	if m != nil {
		return m.Address2
	}
	return ""
}

func (m *Address) GetAddress3() string {
	if m != nil {
		return m.Address3
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

// Static list of typical room amenities.
type BasicAmenities struct {
	FreeBreakfast        bool     `protobuf:"varint,1,opt,name=free_breakfast,json=freeBreakfast,proto3" json:"free_breakfast,omitempty"`
	FreeWifi             bool     `protobuf:"varint,2,opt,name=free_wifi,json=freeWifi,proto3" json:"free_wifi,omitempty"`
	FreeParking          bool     `protobuf:"varint,3,opt,name=free_parking,json=freeParking,proto3" json:"free_parking,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BasicAmenities) Reset()         { *m = BasicAmenities{} }
func (m *BasicAmenities) String() string { return proto.CompactTextString(m) }
func (*BasicAmenities) ProtoMessage()    {}
func (*BasicAmenities) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{6}
}

func (m *BasicAmenities) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicAmenities.Unmarshal(m, b)
}
func (m *BasicAmenities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicAmenities.Marshal(b, m, deterministic)
}
func (m *BasicAmenities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAmenities.Merge(m, src)
}
func (m *BasicAmenities) XXX_Size() int {
	return xxx_messageInfo_BasicAmenities.Size(m)
}
func (m *BasicAmenities) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAmenities.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAmenities proto.InternalMessageInfo

func (m *BasicAmenities) GetFreeBreakfast() bool {
	if m != nil {
		return m.FreeBreakfast
	}
	return false
}

func (m *BasicAmenities) GetFreeWifi() bool {
	if m != nil {
		return m.FreeWifi
	}
	return false
}

func (m *BasicAmenities) GetFreeParking() bool {
	if m != nil {
		return m.FreeParking
	}
	return false
}

// Cancellation Policy details.
type CancellationPolicy struct {
	// Designated cancellation policy. (required)
	Summary CancellationPolicy_CancellationSummary `protobuf:"varint,1,opt,name=summary,proto3,enum=ext.travel.booking.partner.v1.CancellationPolicy_CancellationSummary" json:"summary,omitempty"`
	// If summary is FREE_CANCELLATION, the date and time after which it is no
	// longer possible to cancel the reservation without penalty, or if summary is
	// PARTIAL_REFUND, the date and time after which it is no longer possible to
	// cancel the reservation with a penalty less than the total amount paid (ISO
	// 8601 format YYYY-MM-DDThh:mm:ss+/-hh:mm).
	// (required if summary is FREE_CANCELLATION)
	CancellationDeadline string `protobuf:"bytes,2,opt,name=cancellation_deadline,json=cancellationDeadline,proto3" json:"cancellation_deadline,omitempty"`
	// Display additional policy information associated with this cancellation
	// policy. (required unless rules is fully specified in each RoomRate using
	// this RatePlan)
	UnstructuredPolicy   *DisplayString `protobuf:"bytes,3,opt,name=unstructured_policy,json=unstructuredPolicy,proto3" json:"unstructured_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CancellationPolicy) Reset()         { *m = CancellationPolicy{} }
func (m *CancellationPolicy) String() string { return proto.CompactTextString(m) }
func (*CancellationPolicy) ProtoMessage()    {}
func (*CancellationPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{7}
}

func (m *CancellationPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancellationPolicy.Unmarshal(m, b)
}
func (m *CancellationPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancellationPolicy.Marshal(b, m, deterministic)
}
func (m *CancellationPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancellationPolicy.Merge(m, src)
}
func (m *CancellationPolicy) XXX_Size() int {
	return xxx_messageInfo_CancellationPolicy.Size(m)
}
func (m *CancellationPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CancellationPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CancellationPolicy proto.InternalMessageInfo

func (m *CancellationPolicy) GetSummary() CancellationPolicy_CancellationSummary {
	if m != nil {
		return m.Summary
	}
	return CancellationPolicy_UNKNOWN_CANCELLATION_POLICY
}

func (m *CancellationPolicy) GetCancellationDeadline() string {
	if m != nil {
		return m.CancellationDeadline
	}
	return ""
}

func (m *CancellationPolicy) GetUnstructuredPolicy() *DisplayString {
	if m != nil {
		return m.UnstructuredPolicy
	}
	return nil
}

// Number of adult and children occupants.
type Capacity struct {
	// Maximum occupants that the room is capable of accommodating. (required)
	Adults int32 `protobuf:"varint,1,opt,name=adults,proto3" json:"adults,omitempty"`
	// Number of children allowed in the room. (optional)
	Children             int32    `protobuf:"varint,2,opt,name=children,proto3" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Capacity) Reset()         { *m = Capacity{} }
func (m *Capacity) String() string { return proto.CompactTextString(m) }
func (*Capacity) ProtoMessage()    {}
func (*Capacity) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{8}
}

func (m *Capacity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Capacity.Unmarshal(m, b)
}
func (m *Capacity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Capacity.Marshal(b, m, deterministic)
}
func (m *Capacity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Capacity.Merge(m, src)
}
func (m *Capacity) XXX_Size() int {
	return xxx_messageInfo_Capacity.Size(m)
}
func (m *Capacity) XXX_DiscardUnknown() {
	xxx_messageInfo_Capacity.DiscardUnknown(m)
}

var xxx_messageInfo_Capacity proto.InternalMessageInfo

func (m *Capacity) GetAdults() int32 {
	if m != nil {
		return m.Adults
	}
	return 0
}

func (m *Capacity) GetChildren() int32 {
	if m != nil {
		return m.Children
	}
	return 0
}

// Customer details.
type Customer struct {
	// Given name. (required)
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// Surname. (required)
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// Domestic format for given country. (required)
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Customer email address. (required)
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// The ISO 3166 country code identified by the originating user request.
	// (required)
	Country              string   `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Customer) Reset()         { *m = Customer{} }
func (m *Customer) String() string { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()    {}
func (*Customer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{9}
}

func (m *Customer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Customer.Unmarshal(m, b)
}
func (m *Customer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Customer.Marshal(b, m, deterministic)
}
func (m *Customer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Customer.Merge(m, src)
}
func (m *Customer) XXX_Size() int {
	return xxx_messageInfo_Customer.Size(m)
}
func (m *Customer) XXX_DiscardUnknown() {
	xxx_messageInfo_Customer.DiscardUnknown(m)
}

var xxx_messageInfo_Customer proto.InternalMessageInfo

func (m *Customer) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Customer) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Customer) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

// Text for display along with it's specified language code (if available).
type DisplayString struct {
	// The text to be displayed. (required)
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The BCP-47 language tag identifying the language expected in the response.
	// (required, unless language is not known)
	Language             string   `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisplayString) Reset()         { *m = DisplayString{} }
func (m *DisplayString) String() string { return proto.CompactTextString(m) }
func (*DisplayString) ProtoMessage()    {}
func (*DisplayString) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{10}
}

func (m *DisplayString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisplayString.Unmarshal(m, b)
}
func (m *DisplayString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisplayString.Marshal(b, m, deterministic)
}
func (m *DisplayString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayString.Merge(m, src)
}
func (m *DisplayString) XXX_Size() int {
	return xxx_messageInfo_DisplayString.Size(m)
}
func (m *DisplayString) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayString.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayString proto.InternalMessageInfo

func (m *DisplayString) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *DisplayString) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

// Hotel property metadata details.
type HotelDetails struct {
	// Name of the hotel property. (required)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Address of the hotel property. (required)
	Address *Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Geolocation of the hotel property. (optional)
	Geolocation *HotelDetails_Geolocation `protobuf:"bytes,3,opt,name=geolocation,proto3" json:"geolocation,omitempty"`
	// The phone number customers can use to reach the hotel. (required)
	PhoneNumber string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Hotel policies. (optional)
	Policies *HotelDetails_HotelPolicies `protobuf:"bytes,5,opt,name=policies,proto3" json:"policies,omitempty"`
	// Hotel property photos. (optional)
	Photos []*Photo `protobuf:"bytes,6,rep,name=photos,proto3" json:"photos,omitempty"`
	// The email address customers can use to reach the hotel. (optional)
	Email string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	// The url for the hotel's home page. (optional)
	HomepageUrl          string   `protobuf:"bytes,8,opt,name=homepage_url,json=homepageUrl,proto3" json:"homepage_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotelDetails) Reset()         { *m = HotelDetails{} }
func (m *HotelDetails) String() string { return proto.CompactTextString(m) }
func (*HotelDetails) ProtoMessage()    {}
func (*HotelDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{11}
}

func (m *HotelDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HotelDetails.Unmarshal(m, b)
}
func (m *HotelDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HotelDetails.Marshal(b, m, deterministic)
}
func (m *HotelDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotelDetails.Merge(m, src)
}
func (m *HotelDetails) XXX_Size() int {
	return xxx_messageInfo_HotelDetails.Size(m)
}
func (m *HotelDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_HotelDetails.DiscardUnknown(m)
}

var xxx_messageInfo_HotelDetails proto.InternalMessageInfo

func (m *HotelDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HotelDetails) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *HotelDetails) GetGeolocation() *HotelDetails_Geolocation {
	if m != nil {
		return m.Geolocation
	}
	return nil
}

func (m *HotelDetails) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *HotelDetails) GetPolicies() *HotelDetails_HotelPolicies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *HotelDetails) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *HotelDetails) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *HotelDetails) GetHomepageUrl() string {
	if m != nil {
		return m.HomepageUrl
	}
	return ""
}

// Represents a latitude and longitude coordinate location.
type HotelDetails_Geolocation struct {
	Latitude             float64  `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotelDetails_Geolocation) Reset()         { *m = HotelDetails_Geolocation{} }
func (m *HotelDetails_Geolocation) String() string { return proto.CompactTextString(m) }
func (*HotelDetails_Geolocation) ProtoMessage()    {}
func (*HotelDetails_Geolocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{11, 0}
}

func (m *HotelDetails_Geolocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HotelDetails_Geolocation.Unmarshal(m, b)
}
func (m *HotelDetails_Geolocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HotelDetails_Geolocation.Marshal(b, m, deterministic)
}
func (m *HotelDetails_Geolocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotelDetails_Geolocation.Merge(m, src)
}
func (m *HotelDetails_Geolocation) XXX_Size() int {
	return xxx_messageInfo_HotelDetails_Geolocation.Size(m)
}
func (m *HotelDetails_Geolocation) XXX_DiscardUnknown() {
	xxx_messageInfo_HotelDetails_Geolocation.DiscardUnknown(m)
}

var xxx_messageInfo_HotelDetails_Geolocation proto.InternalMessageInfo

func (m *HotelDetails_Geolocation) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *HotelDetails_Geolocation) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

// Hotel policy details.
type HotelDetails_HotelPolicies struct {
	// Check-in time in the hotel's local time zone including the time zone if
	// possible (ISO 8601 format hh:mm or hh:mm+/-hh:mm). (optional)
	CheckInTime string `protobuf:"bytes,1,opt,name=check_in_time,json=checkInTime,proto3" json:"check_in_time,omitempty"`
	// Check-out time in the hotel's local time zone including the time zone if
	// possible (ISO 8601 format hh:mm or hh:mm+/-hh:mm). (optional)
	CheckOutTime string `protobuf:"bytes,2,opt,name=check_out_time,json=checkOutTime,proto3" json:"check_out_time,omitempty"`
	// Maximum age for a guest to be considered a child. (optional)
	MaxChildAge          int32    `protobuf:"varint,3,opt,name=max_child_age,json=maxChildAge,proto3" json:"max_child_age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotelDetails_HotelPolicies) Reset()         { *m = HotelDetails_HotelPolicies{} }
func (m *HotelDetails_HotelPolicies) String() string { return proto.CompactTextString(m) }
func (*HotelDetails_HotelPolicies) ProtoMessage()    {}
func (*HotelDetails_HotelPolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{11, 1}
}

func (m *HotelDetails_HotelPolicies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HotelDetails_HotelPolicies.Unmarshal(m, b)
}
func (m *HotelDetails_HotelPolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HotelDetails_HotelPolicies.Marshal(b, m, deterministic)
}
func (m *HotelDetails_HotelPolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotelDetails_HotelPolicies.Merge(m, src)
}
func (m *HotelDetails_HotelPolicies) XXX_Size() int {
	return xxx_messageInfo_HotelDetails_HotelPolicies.Size(m)
}
func (m *HotelDetails_HotelPolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_HotelDetails_HotelPolicies.DiscardUnknown(m)
}

var xxx_messageInfo_HotelDetails_HotelPolicies proto.InternalMessageInfo

func (m *HotelDetails_HotelPolicies) GetCheckInTime() string {
	if m != nil {
		return m.CheckInTime
	}
	return ""
}

func (m *HotelDetails_HotelPolicies) GetCheckOutTime() string {
	if m != nil {
		return m.CheckOutTime
	}
	return ""
}

func (m *HotelDetails_HotelPolicies) GetMaxChildAge() int32 {
	if m != nil {
		return m.MaxChildAge
	}
	return 0
}

// Number of adult guests and children by age in years in a party.
type Occupancy struct {
	// If only a total person occupancy is known, consider all to be adults.
	// (required)
	Adults int32 `protobuf:"varint,1,opt,name=adults,proto3" json:"adults,omitempty"`
	// One element per child occupant with value equal to the child's age in
	// years. (optional)
	Children             []int32  `protobuf:"varint,2,rep,packed,name=children,proto3" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Occupancy) Reset()         { *m = Occupancy{} }
func (m *Occupancy) String() string { return proto.CompactTextString(m) }
func (*Occupancy) ProtoMessage()    {}
func (*Occupancy) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{12}
}

func (m *Occupancy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Occupancy.Unmarshal(m, b)
}
func (m *Occupancy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Occupancy.Marshal(b, m, deterministic)
}
func (m *Occupancy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Occupancy.Merge(m, src)
}
func (m *Occupancy) XXX_Size() int {
	return xxx_messageInfo_Occupancy.Size(m)
}
func (m *Occupancy) XXX_DiscardUnknown() {
	xxx_messageInfo_Occupancy.DiscardUnknown(m)
}

var xxx_messageInfo_Occupancy proto.InternalMessageInfo

func (m *Occupancy) GetAdults() int32 {
	if m != nil {
		return m.Adults
	}
	return 0
}

func (m *Occupancy) GetChildren() []int32 {
	if m != nil {
		return m.Children
	}
	return nil
}

// Partner policy details.
type PartnerPolicies struct {
	// Credit card option details. (required)
	CardOptions []*PartnerPolicies_CardOption `protobuf:"bytes,1,rep,name=card_options,json=cardOptions,proto3" json:"card_options,omitempty"`
	// Display additional policy information associated with this partner policy.
	// (optional)
	UnstructuredPolicies *DisplayString `protobuf:"bytes,2,opt,name=unstructured_policies,json=unstructuredPolicies,proto3" json:"unstructured_policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PartnerPolicies) Reset()         { *m = PartnerPolicies{} }
func (m *PartnerPolicies) String() string { return proto.CompactTextString(m) }
func (*PartnerPolicies) ProtoMessage()    {}
func (*PartnerPolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{13}
}

func (m *PartnerPolicies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartnerPolicies.Unmarshal(m, b)
}
func (m *PartnerPolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartnerPolicies.Marshal(b, m, deterministic)
}
func (m *PartnerPolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerPolicies.Merge(m, src)
}
func (m *PartnerPolicies) XXX_Size() int {
	return xxx_messageInfo_PartnerPolicies.Size(m)
}
func (m *PartnerPolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerPolicies.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerPolicies proto.InternalMessageInfo

func (m *PartnerPolicies) GetCardOptions() []*PartnerPolicies_CardOption {
	if m != nil {
		return m.CardOptions
	}
	return nil
}

func (m *PartnerPolicies) GetUnstructuredPolicies() *DisplayString {
	if m != nil {
		return m.UnstructuredPolicies
	}
	return nil
}

type PartnerPolicies_CardOption struct {
	// Specify the card type. (required)
	CardType CardType `protobuf:"varint,1,opt,name=card_type,json=cardType,proto3,enum=ext.travel.booking.partner.v1.CardType" json:"card_type,omitempty"`
	// Whether or not the CVC number is required. (required)
	CvcRequired          bool     `protobuf:"varint,2,opt,name=cvc_required,json=cvcRequired,proto3" json:"cvc_required,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartnerPolicies_CardOption) Reset()         { *m = PartnerPolicies_CardOption{} }
func (m *PartnerPolicies_CardOption) String() string { return proto.CompactTextString(m) }
func (*PartnerPolicies_CardOption) ProtoMessage()    {}
func (*PartnerPolicies_CardOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{13, 0}
}

func (m *PartnerPolicies_CardOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartnerPolicies_CardOption.Unmarshal(m, b)
}
func (m *PartnerPolicies_CardOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartnerPolicies_CardOption.Marshal(b, m, deterministic)
}
func (m *PartnerPolicies_CardOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerPolicies_CardOption.Merge(m, src)
}
func (m *PartnerPolicies_CardOption) XXX_Size() int {
	return xxx_messageInfo_PartnerPolicies_CardOption.Size(m)
}
func (m *PartnerPolicies_CardOption) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerPolicies_CardOption.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerPolicies_CardOption proto.InternalMessageInfo

func (m *PartnerPolicies_CardOption) GetCardType() CardType {
	if m != nil {
		return m.CardType
	}
	return CardType_AX
}

func (m *PartnerPolicies_CardOption) GetCvcRequired() bool {
	if m != nil {
		return m.CvcRequired
	}
	return false
}

// Photo definition.
type Photo struct {
	// The url of the photo. (required)
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Description of the photo, sometimes used at the alt text for display.
	// (optional)
	Description          *DisplayString `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Photo) Reset()         { *m = Photo{} }
func (m *Photo) String() string { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()    {}
func (*Photo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{14}
}

func (m *Photo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Photo.Unmarshal(m, b)
}
func (m *Photo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Photo.Marshal(b, m, deterministic)
}
func (m *Photo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Photo.Merge(m, src)
}
func (m *Photo) XXX_Size() int {
	return xxx_messageInfo_Photo.Size(m)
}
func (m *Photo) XXX_DiscardUnknown() {
	xxx_messageInfo_Photo.DiscardUnknown(m)
}

var xxx_messageInfo_Photo proto.InternalMessageInfo

func (m *Photo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Photo) GetDescription() *DisplayString {
	if m != nil {
		return m.Description
	}
	return nil
}

// Price details.
type Price struct {
	// Price in float, ex. 123.45 (required)
	Amount float32 `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The currency of the price that is defined in ISO 4217. (required)
	Currency             string   `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{15}
}

func (m *Price) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Price.Unmarshal(m, b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Price.Marshal(b, m, deterministic)
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return xxx_messageInfo_Price.Size(m)
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Price) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

// Rate plan details.
type RatePlan struct {
	// Identifier for the rate plan. (required)
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Partner provided rate plan name. (required)
	Name *DisplayString `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description displayed for this rate plan. (optional)
	Description *DisplayString `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates basic amenities available for this rate plan. (optional)
	BasicAmenities *BasicAmenities `protobuf:"bytes,4,opt,name=basic_amenities,json=basicAmenities,proto3" json:"basic_amenities,omitempty"`
	// Optional type of guarantee required to guarantee reservation. (required)
	GuaranteeType GuaranteeType `protobuf:"varint,5,opt,name=guarantee_type,json=guaranteeType,proto3,enum=ext.travel.booking.partner.v1.GuaranteeType" json:"guarantee_type,omitempty"`
	// The designated cancellation policy for this rate plan.  (required)
	CancellationPolicy *CancellationPolicy `protobuf:"bytes,6,opt,name=cancellation_policy,json=cancellationPolicy,proto3" json:"cancellation_policy,omitempty"`
	// Display additional policy information associated with this rate plan.
	// (optional)
	UnstructuredPolicies []*DisplayString `protobuf:"bytes,7,rep,name=unstructured_policies,json=unstructuredPolicies,proto3" json:"unstructured_policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RatePlan) Reset()         { *m = RatePlan{} }
func (m *RatePlan) String() string { return proto.CompactTextString(m) }
func (*RatePlan) ProtoMessage()    {}
func (*RatePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{16}
}

func (m *RatePlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatePlan.Unmarshal(m, b)
}
func (m *RatePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatePlan.Marshal(b, m, deterministic)
}
func (m *RatePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatePlan.Merge(m, src)
}
func (m *RatePlan) XXX_Size() int {
	return xxx_messageInfo_RatePlan.Size(m)
}
func (m *RatePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_RatePlan.DiscardUnknown(m)
}

var xxx_messageInfo_RatePlan proto.InternalMessageInfo

func (m *RatePlan) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RatePlan) GetName() *DisplayString {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RatePlan) GetDescription() *DisplayString {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *RatePlan) GetBasicAmenities() *BasicAmenities {
	if m != nil {
		return m.BasicAmenities
	}
	return nil
}

func (m *RatePlan) GetGuaranteeType() GuaranteeType {
	if m != nil {
		return m.GuaranteeType
	}
	return GuaranteeType_NO_GUARANTEE
}

func (m *RatePlan) GetCancellationPolicy() *CancellationPolicy {
	if m != nil {
		return m.CancellationPolicy
	}
	return nil
}

func (m *RatePlan) GetUnstructuredPolicies() []*DisplayString {
	if m != nil {
		return m.UnstructuredPolicies
	}
	return nil
}

// Room rate details.
type RoomRate struct {
	// Identifier for the room type, should correspond to RoomID in the
	// RoomBundle. (required)
	// https://developers.google.com/hotels/hotel-ads/xml-reference/transaction-messages#RoomBundle
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Identifier for the associated room type. (required)
	RoomTypeCode string `protobuf:"bytes,2,opt,name=room_type_code,json=roomTypeCode,proto3" json:"room_type_code,omitempty"`
	// Identifier for the associated rate plan. (required)
	RatePlanCode string `protobuf:"bytes,3,opt,name=rate_plan_code,json=ratePlanCode,proto3" json:"rate_plan_code,omitempty"`
	// Maximum occupancy allowed for this room rate. If not specified, the room
	// rate must accommodate the party in the BookingAvailabilityRequest.
	// (optional)
	MaximumAllowedOccupancy *Capacity `protobuf:"bytes,4,opt,name=maximum_allowed_occupancy,json=maximumAllowedOccupancy,proto3" json:"maximum_allowed_occupancy,omitempty"`
	// Total price at booking, should equal the sum of line_items for which
	// paid_at_checkout is false. (required)
	TotalPriceAtBooking *Price `protobuf:"bytes,5,opt,name=total_price_at_booking,json=totalPriceAtBooking,proto3" json:"total_price_at_booking,omitempty"`
	// Total price at checkout, should equal the sum of line_items for which
	// paid_at_checkout is true. (required)
	TotalPriceAtCheckout *Price `protobuf:"bytes,6,opt,name=total_price_at_checkout,json=totalPriceAtCheckout,proto3" json:"total_price_at_checkout,omitempty"`
	// List of line item details. Will not be populated in BookingSubmitRequest.
	// (required for availability response only)
	LineItems []*RoomRate_LineItem `protobuf:"bytes,7,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	// Preferred over CancellationPolicy/unstructured_policy when available. Will
	// not be populated in BookingSubmitRequest. (optional)
	CancellationRules []*RoomRate_CancellationRule `protobuf:"bytes,8,rep,name=cancellation_rules,json=cancellationRules,proto3" json:"cancellation_rules,omitempty"`
	// Display additional policy information associated with this room rate. Will
	// not be populated in BookingSubmitRequest. (optional)
	UnstructuredPolicy *DisplayString `protobuf:"bytes,9,opt,name=unstructured_policy,json=unstructuredPolicy,proto3" json:"unstructured_policy,omitempty"`
	// Arbitrary data to be echoed back in the booking submission. (optional)
	PartnerData []string `protobuf:"bytes,10,rep,name=partner_data,json=partnerData,proto3" json:"partner_data,omitempty"`
	// Number of rooms available for this RoomRate. Will not be populated in
	// BookingSubmitRequest. (optional)
	RoomCount            int32    `protobuf:"varint,11,opt,name=room_count,json=roomCount,proto3" json:"room_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomRate) Reset()         { *m = RoomRate{} }
func (m *RoomRate) String() string { return proto.CompactTextString(m) }
func (*RoomRate) ProtoMessage()    {}
func (*RoomRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{17}
}

func (m *RoomRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomRate.Unmarshal(m, b)
}
func (m *RoomRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomRate.Marshal(b, m, deterministic)
}
func (m *RoomRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRate.Merge(m, src)
}
func (m *RoomRate) XXX_Size() int {
	return xxx_messageInfo_RoomRate.Size(m)
}
func (m *RoomRate) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRate.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRate proto.InternalMessageInfo

func (m *RoomRate) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RoomRate) GetRoomTypeCode() string {
	if m != nil {
		return m.RoomTypeCode
	}
	return ""
}

func (m *RoomRate) GetRatePlanCode() string {
	if m != nil {
		return m.RatePlanCode
	}
	return ""
}

func (m *RoomRate) GetMaximumAllowedOccupancy() *Capacity {
	if m != nil {
		return m.MaximumAllowedOccupancy
	}
	return nil
}

func (m *RoomRate) GetTotalPriceAtBooking() *Price {
	if m != nil {
		return m.TotalPriceAtBooking
	}
	return nil
}

func (m *RoomRate) GetTotalPriceAtCheckout() *Price {
	if m != nil {
		return m.TotalPriceAtCheckout
	}
	return nil
}

func (m *RoomRate) GetLineItems() []*RoomRate_LineItem {
	if m != nil {
		return m.LineItems
	}
	return nil
}

func (m *RoomRate) GetCancellationRules() []*RoomRate_CancellationRule {
	if m != nil {
		return m.CancellationRules
	}
	return nil
}

func (m *RoomRate) GetUnstructuredPolicy() *DisplayString {
	if m != nil {
		return m.UnstructuredPolicy
	}
	return nil
}

func (m *RoomRate) GetPartnerData() []string {
	if m != nil {
		return m.PartnerData
	}
	return nil
}

func (m *RoomRate) GetRoomCount() int32 {
	if m != nil {
		return m.RoomCount
	}
	return 0
}

type RoomRate_LineItem struct {
	// Price should be for the reservation and for the stay, unless stay_date
	// is specified, in which case it should be for the particular night of the
	// stay. (required)
	Price *Price `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// The type of this line item. (reqired)
	Type RoomRate_LineItem_LineItemType `protobuf:"varint,2,opt,name=type,proto3,enum=ext.travel.booking.partner.v1.RoomRate_LineItem_LineItemType" json:"type,omitempty"`
	// True if price is paid at checkout, false if the price is paid at booking.
	// (required)
	PaidAtCheckout bool `protobuf:"varint,3,opt,name=paid_at_checkout,json=paidAtCheckout,proto3" json:"paid_at_checkout,omitempty"`
	// Line item descripion. (optional)
	Description          *DisplayString `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RoomRate_LineItem) Reset()         { *m = RoomRate_LineItem{} }
func (m *RoomRate_LineItem) String() string { return proto.CompactTextString(m) }
func (*RoomRate_LineItem) ProtoMessage()    {}
func (*RoomRate_LineItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{17, 0}
}

func (m *RoomRate_LineItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomRate_LineItem.Unmarshal(m, b)
}
func (m *RoomRate_LineItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomRate_LineItem.Marshal(b, m, deterministic)
}
func (m *RoomRate_LineItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRate_LineItem.Merge(m, src)
}
func (m *RoomRate_LineItem) XXX_Size() int {
	return xxx_messageInfo_RoomRate_LineItem.Size(m)
}
func (m *RoomRate_LineItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRate_LineItem.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRate_LineItem proto.InternalMessageInfo

func (m *RoomRate_LineItem) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *RoomRate_LineItem) GetType() RoomRate_LineItem_LineItemType {
	if m != nil {
		return m.Type
	}
	return RoomRate_LineItem_BASE_RATE
}

func (m *RoomRate_LineItem) GetPaidAtCheckout() bool {
	if m != nil {
		return m.PaidAtCheckout
	}
	return false
}

func (m *RoomRate_LineItem) GetDescription() *DisplayString {
	if m != nil {
		return m.Description
	}
	return nil
}

// Rules for applying penalties if certain cancellation deadlines are missed.
type RoomRate_CancellationRule struct {
	// Date and time after which the cancellation rule takes effect, or empty
	// if the rule is in effect from the time of booking (ISO 8601 format
	// YYYY-MM-DDThh:mm:ss+/-hh:mm), or "NO_SHOW" for a no show fee charged if
	// the user neither cancels nor shows up for the reservation. (required
	// unless rule is in effect from the time of booking)
	Deadline string `protobuf:"bytes,1,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// Fee charged if the reservation is canceled after the deadline, or if the
	// deadline is "NO_SHOW", the fee charged if user does not show up.
	// (required)
	Penalty              *Price   `protobuf:"bytes,2,opt,name=penalty,proto3" json:"penalty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomRate_CancellationRule) Reset()         { *m = RoomRate_CancellationRule{} }
func (m *RoomRate_CancellationRule) String() string { return proto.CompactTextString(m) }
func (*RoomRate_CancellationRule) ProtoMessage()    {}
func (*RoomRate_CancellationRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{17, 1}
}

func (m *RoomRate_CancellationRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomRate_CancellationRule.Unmarshal(m, b)
}
func (m *RoomRate_CancellationRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomRate_CancellationRule.Marshal(b, m, deterministic)
}
func (m *RoomRate_CancellationRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRate_CancellationRule.Merge(m, src)
}
func (m *RoomRate_CancellationRule) XXX_Size() int {
	return xxx_messageInfo_RoomRate_CancellationRule.Size(m)
}
func (m *RoomRate_CancellationRule) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRate_CancellationRule.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRate_CancellationRule proto.InternalMessageInfo

func (m *RoomRate_CancellationRule) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

func (m *RoomRate_CancellationRule) GetPenalty() *Price {
	if m != nil {
		return m.Penalty
	}
	return nil
}

// Room type details.
type RoomType struct {
	// Identifier for the room type, should correspond to RoomID in the
	// RoomBundle. (required)
	// https://developers.google.com/hotels/hotel-ads/xml-reference/transaction-messages#RoomBundle
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// The name of the room type.
	Name *DisplayString `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description displayed for this room type. (optional)
	Description *DisplayString `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Basic amenities for the associated room type. (optional)
	BasicAmenities *BasicAmenities `protobuf:"bytes,4,opt,name=basic_amenities,json=basicAmenities,proto3" json:"basic_amenities,omitempty"`
	// Room photos. (optional)
	Photos []*Photo `protobuf:"bytes,5,rep,name=photos,proto3" json:"photos,omitempty"`
	// Maximum occupants that the room is capable of accommodating. If not
	// specified, the room type must accommodate the party in the
	// BookingAvailabilityRequest. (optional)
	Capacity *Capacity `protobuf:"bytes,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Count of each bed type available in the room. (optional)
	BedTypes *RoomType_BedTypes `protobuf:"bytes,7,opt,name=bed_types,json=bedTypes,proto3" json:"bed_types,omitempty"`
	// Display additional policy information associated with this room type.
	// (required unless rules is fully specified)
	UnstructuredPolicy   *DisplayString `protobuf:"bytes,8,opt,name=unstructured_policy,json=unstructuredPolicy,proto3" json:"unstructured_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RoomType) Reset()         { *m = RoomType{} }
func (m *RoomType) String() string { return proto.CompactTextString(m) }
func (*RoomType) ProtoMessage()    {}
func (*RoomType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{18}
}

func (m *RoomType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomType.Unmarshal(m, b)
}
func (m *RoomType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomType.Marshal(b, m, deterministic)
}
func (m *RoomType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomType.Merge(m, src)
}
func (m *RoomType) XXX_Size() int {
	return xxx_messageInfo_RoomType.Size(m)
}
func (m *RoomType) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomType.DiscardUnknown(m)
}

var xxx_messageInfo_RoomType proto.InternalMessageInfo

func (m *RoomType) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RoomType) GetName() *DisplayString {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RoomType) GetDescription() *DisplayString {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *RoomType) GetBasicAmenities() *BasicAmenities {
	if m != nil {
		return m.BasicAmenities
	}
	return nil
}

func (m *RoomType) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *RoomType) GetCapacity() *Capacity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *RoomType) GetBedTypes() *RoomType_BedTypes {
	if m != nil {
		return m.BedTypes
	}
	return nil
}

func (m *RoomType) GetUnstructuredPolicy() *DisplayString {
	if m != nil {
		return m.UnstructuredPolicy
	}
	return nil
}

type RoomType_BedTypes struct {
	TotalBeds            int32    `protobuf:"varint,1,opt,name=total_beds,json=totalBeds,proto3" json:"total_beds,omitempty"`
	KingBeds             int32    `protobuf:"varint,2,opt,name=king_beds,json=kingBeds,proto3" json:"king_beds,omitempty"`
	QueenBeds            int32    `protobuf:"varint,3,opt,name=queen_beds,json=queenBeds,proto3" json:"queen_beds,omitempty"`
	DoubleBeds           int32    `protobuf:"varint,4,opt,name=double_beds,json=doubleBeds,proto3" json:"double_beds,omitempty"`
	SingleOrTwinBeds     int32    `protobuf:"varint,5,opt,name=single_or_twin_beds,json=singleOrTwinBeds,proto3" json:"single_or_twin_beds,omitempty"`
	MurphyBeds           int32    `protobuf:"varint,6,opt,name=murphy_beds,json=murphyBeds,proto3" json:"murphy_beds,omitempty"`
	SofaBeds             int32    `protobuf:"varint,7,opt,name=sofa_beds,json=sofaBeds,proto3" json:"sofa_beds,omitempty"`
	BunkBeds             int32    `protobuf:"varint,8,opt,name=bunk_beds,json=bunkBeds,proto3" json:"bunk_beds,omitempty"`
	OtherBeds            int32    `protobuf:"varint,9,opt,name=other_beds,json=otherBeds,proto3" json:"other_beds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomType_BedTypes) Reset()         { *m = RoomType_BedTypes{} }
func (m *RoomType_BedTypes) String() string { return proto.CompactTextString(m) }
func (*RoomType_BedTypes) ProtoMessage()    {}
func (*RoomType_BedTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{18, 0}
}

func (m *RoomType_BedTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomType_BedTypes.Unmarshal(m, b)
}
func (m *RoomType_BedTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomType_BedTypes.Marshal(b, m, deterministic)
}
func (m *RoomType_BedTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomType_BedTypes.Merge(m, src)
}
func (m *RoomType_BedTypes) XXX_Size() int {
	return xxx_messageInfo_RoomType_BedTypes.Size(m)
}
func (m *RoomType_BedTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomType_BedTypes.DiscardUnknown(m)
}

var xxx_messageInfo_RoomType_BedTypes proto.InternalMessageInfo

func (m *RoomType_BedTypes) GetTotalBeds() int32 {
	if m != nil {
		return m.TotalBeds
	}
	return 0
}

func (m *RoomType_BedTypes) GetKingBeds() int32 {
	if m != nil {
		return m.KingBeds
	}
	return 0
}

func (m *RoomType_BedTypes) GetQueenBeds() int32 {
	if m != nil {
		return m.QueenBeds
	}
	return 0
}

func (m *RoomType_BedTypes) GetDoubleBeds() int32 {
	if m != nil {
		return m.DoubleBeds
	}
	return 0
}

func (m *RoomType_BedTypes) GetSingleOrTwinBeds() int32 {
	if m != nil {
		return m.SingleOrTwinBeds
	}
	return 0
}

func (m *RoomType_BedTypes) GetMurphyBeds() int32 {
	if m != nil {
		return m.MurphyBeds
	}
	return 0
}

func (m *RoomType_BedTypes) GetSofaBeds() int32 {
	if m != nil {
		return m.SofaBeds
	}
	return 0
}

func (m *RoomType_BedTypes) GetBunkBeds() int32 {
	if m != nil {
		return m.BunkBeds
	}
	return 0
}

func (m *RoomType_BedTypes) GetOtherBeds() int32 {
	if m != nil {
		return m.OtherBeds
	}
	return 0
}

// Booking submit error details.
type SubmitError struct {
	Type SubmitError_SubmitErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=ext.travel.booking.partner.v1.SubmitError_SubmitErrorType" json:"type,omitempty"`
	// Detailed message for debugging the error. (required)
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitError) Reset()         { *m = SubmitError{} }
func (m *SubmitError) String() string { return proto.CompactTextString(m) }
func (*SubmitError) ProtoMessage()    {}
func (*SubmitError) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{19}
}

func (m *SubmitError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitError.Unmarshal(m, b)
}
func (m *SubmitError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitError.Marshal(b, m, deterministic)
}
func (m *SubmitError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitError.Merge(m, src)
}
func (m *SubmitError) XXX_Size() int {
	return xxx_messageInfo_SubmitError.Size(m)
}
func (m *SubmitError) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitError.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitError proto.InternalMessageInfo

func (m *SubmitError) GetType() SubmitError_SubmitErrorType {
	if m != nil {
		return m.Type
	}
	return SubmitError_UNKNOWN_ERROR
}

func (m *SubmitError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Partner provided tracking parameters.
type Tracking struct {
	// Optional advertising campaign identifier. (optional)
	CampaignId string `protobuf:"bytes,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	// Point of Sale (POS) URL, a deep link to the partner's website that may
	// contain tracking parameters. (optional)
	PosUrl               string   `protobuf:"bytes,2,opt,name=pos_url,json=posUrl,proto3" json:"pos_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tracking) Reset()         { *m = Tracking{} }
func (m *Tracking) String() string { return proto.CompactTextString(m) }
func (*Tracking) ProtoMessage()    {}
func (*Tracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{20}
}

func (m *Tracking) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tracking.Unmarshal(m, b)
}
func (m *Tracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tracking.Marshal(b, m, deterministic)
}
func (m *Tracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracking.Merge(m, src)
}
func (m *Tracking) XXX_Size() int {
	return xxx_messageInfo_Tracking.Size(m)
}
func (m *Tracking) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracking.DiscardUnknown(m)
}

var xxx_messageInfo_Tracking proto.InternalMessageInfo

func (m *Tracking) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

func (m *Tracking) GetPosUrl() string {
	if m != nil {
		return m.PosUrl
	}
	return ""
}

// Traveler details.
type Traveler struct {
	// Given name. (required)
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// Surname. (required)
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// Count of travlers in party. (required)
	Occupancy            *Occupancy `protobuf:"bytes,3,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Traveler) Reset()         { *m = Traveler{} }
func (m *Traveler) String() string { return proto.CompactTextString(m) }
func (*Traveler) ProtoMessage()    {}
func (*Traveler) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e4aa7d76fd7ee8a, []int{21}
}

func (m *Traveler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Traveler.Unmarshal(m, b)
}
func (m *Traveler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Traveler.Marshal(b, m, deterministic)
}
func (m *Traveler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Traveler.Merge(m, src)
}
func (m *Traveler) XXX_Size() int {
	return xxx_messageInfo_Traveler.Size(m)
}
func (m *Traveler) XXX_DiscardUnknown() {
	xxx_messageInfo_Traveler.DiscardUnknown(m)
}

var xxx_messageInfo_Traveler proto.InternalMessageInfo

func (m *Traveler) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Traveler) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Traveler) GetOccupancy() *Occupancy {
	if m != nil {
		return m.Occupancy
	}
	return nil
}

func init() {
	proto.RegisterEnum("ext.travel.booking.partner.v1.CardType", CardType_name, CardType_value)
	proto.RegisterEnum("ext.travel.booking.partner.v1.GuaranteeType", GuaranteeType_name, GuaranteeType_value)
	proto.RegisterEnum("ext.travel.booking.partner.v1.BookingAvailabilityRequest_DeviceType", BookingAvailabilityRequest_DeviceType_name, BookingAvailabilityRequest_DeviceType_value)
	proto.RegisterEnum("ext.travel.booking.partner.v1.BookingSubmitResponse_Status", BookingSubmitResponse_Status_name, BookingSubmitResponse_Status_value)
	proto.RegisterEnum("ext.travel.booking.partner.v1.AvailabilityError_AvailabilityErrorType", AvailabilityError_AvailabilityErrorType_name, AvailabilityError_AvailabilityErrorType_value)
	proto.RegisterEnum("ext.travel.booking.partner.v1.CancellationPolicy_CancellationSummary", CancellationPolicy_CancellationSummary_name, CancellationPolicy_CancellationSummary_value)
	proto.RegisterEnum("ext.travel.booking.partner.v1.RoomRate_LineItem_LineItemType", RoomRate_LineItem_LineItemType_name, RoomRate_LineItem_LineItemType_value)
	proto.RegisterEnum("ext.travel.booking.partner.v1.SubmitError_SubmitErrorType", SubmitError_SubmitErrorType_name, SubmitError_SubmitErrorType_value)
	proto.RegisterType((*BookingAvailabilityRequest)(nil), "ext.travel.booking.partner.v1.BookingAvailabilityRequest")
	proto.RegisterType((*BookingAvailabilityResponse)(nil), "ext.travel.booking.partner.v1.BookingAvailabilityResponse")
	proto.RegisterType((*BookingSubmitRequest)(nil), "ext.travel.booking.partner.v1.BookingSubmitRequest")
	proto.RegisterType((*BookingSubmitRequest_Payment)(nil), "ext.travel.booking.partner.v1.BookingSubmitRequest.Payment")
	proto.RegisterType((*BookingSubmitRequest_Payment_PaymentCardParameters)(nil), "ext.travel.booking.partner.v1.BookingSubmitRequest.Payment.PaymentCardParameters")
	proto.RegisterType((*BookingSubmitResponse)(nil), "ext.travel.booking.partner.v1.BookingSubmitResponse")
	proto.RegisterType((*BookingSubmitResponse_Reservation)(nil), "ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation")
	proto.RegisterType((*BookingSubmitResponse_Reservation_Locator)(nil), "ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation.Locator")
	proto.RegisterType((*AvailabilityError)(nil), "ext.travel.booking.partner.v1.AvailabilityError")
	proto.RegisterType((*Address)(nil), "ext.travel.booking.partner.v1.Address")
	proto.RegisterType((*BasicAmenities)(nil), "ext.travel.booking.partner.v1.BasicAmenities")
	proto.RegisterType((*CancellationPolicy)(nil), "ext.travel.booking.partner.v1.CancellationPolicy")
	proto.RegisterType((*Capacity)(nil), "ext.travel.booking.partner.v1.Capacity")
	proto.RegisterType((*Customer)(nil), "ext.travel.booking.partner.v1.Customer")
	proto.RegisterType((*DisplayString)(nil), "ext.travel.booking.partner.v1.DisplayString")
	proto.RegisterType((*HotelDetails)(nil), "ext.travel.booking.partner.v1.HotelDetails")
	proto.RegisterType((*HotelDetails_Geolocation)(nil), "ext.travel.booking.partner.v1.HotelDetails.Geolocation")
	proto.RegisterType((*HotelDetails_HotelPolicies)(nil), "ext.travel.booking.partner.v1.HotelDetails.HotelPolicies")
	proto.RegisterType((*Occupancy)(nil), "ext.travel.booking.partner.v1.Occupancy")
	proto.RegisterType((*PartnerPolicies)(nil), "ext.travel.booking.partner.v1.PartnerPolicies")
	proto.RegisterType((*PartnerPolicies_CardOption)(nil), "ext.travel.booking.partner.v1.PartnerPolicies.CardOption")
	proto.RegisterType((*Photo)(nil), "ext.travel.booking.partner.v1.Photo")
	proto.RegisterType((*Price)(nil), "ext.travel.booking.partner.v1.Price")
	proto.RegisterType((*RatePlan)(nil), "ext.travel.booking.partner.v1.RatePlan")
	proto.RegisterType((*RoomRate)(nil), "ext.travel.booking.partner.v1.RoomRate")
	proto.RegisterType((*RoomRate_LineItem)(nil), "ext.travel.booking.partner.v1.RoomRate.LineItem")
	proto.RegisterType((*RoomRate_CancellationRule)(nil), "ext.travel.booking.partner.v1.RoomRate.CancellationRule")
	proto.RegisterType((*RoomType)(nil), "ext.travel.booking.partner.v1.RoomType")
	proto.RegisterType((*RoomType_BedTypes)(nil), "ext.travel.booking.partner.v1.RoomType.BedTypes")
	proto.RegisterType((*SubmitError)(nil), "ext.travel.booking.partner.v1.SubmitError")
	proto.RegisterType((*Tracking)(nil), "ext.travel.booking.partner.v1.Tracking")
	proto.RegisterType((*Traveler)(nil), "ext.travel.booking.partner.v1.Traveler")
}

func init() { proto.RegisterFile("v1.proto", fileDescriptor_2e4aa7d76fd7ee8a) }

var fileDescriptor_2e4aa7d76fd7ee8a = []byte{
	// 3230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0xcd, 0x73, 0xdb, 0x48,
	0x76, 0x37, 0x49, 0xf1, 0xeb, 0x51, 0xa2, 0xe0, 0x96, 0x64, 0xd3, 0xf2, 0xb8, 0xec, 0x61, 0x66,
	0xb3, 0xce, 0x6c, 0x56, 0xb5, 0x96, 0x0f, 0x49, 0x66, 0x93, 0x59, 0x43, 0x20, 0x64, 0x73, 0x4c,
	0x11, 0x9c, 0x26, 0xa8, 0xb1, 0xf3, 0x51, 0xa8, 0x26, 0xd0, 0x96, 0x50, 0x06, 0x01, 0x0c, 0x00,
	0xca, 0xe6, 0x21, 0x55, 0xa9, 0xdc, 0x72, 0xc8, 0xde, 0x72, 0xc8, 0x3d, 0xf7, 0x5c, 0x92, 0xaa,
	0xad, 0x9c, 0x72, 0xcc, 0x56, 0xe5, 0x6f, 0xc8, 0x3f, 0x90, 0x6b, 0x0e, 0x39, 0xa6, 0xfa, 0x03,
	0x20, 0xa8, 0x0f, 0x93, 0x92, 0x95, 0xd3, 0x5e, 0xc4, 0xee, 0xf7, 0xfa, 0xfd, 0xfa, 0xeb, 0xbd,
	0xd7, 0xef, 0x3d, 0x08, 0x6a, 0x67, 0xcf, 0xf6, 0xc2, 0x28, 0x48, 0x02, 0xf4, 0x88, 0x7e, 0x4c,
	0xf6, 0x92, 0x88, 0x9c, 0x51, 0x6f, 0x6f, 0x1c, 0x04, 0xef, 0x5d, 0xff, 0x64, 0x2f, 0x24, 0x51,
	0xe2, 0xd3, 0x68, 0xef, 0xec, 0x59, 0xfb, 0x3f, 0xd7, 0x60, 0xf7, 0x40, 0x90, 0xd5, 0x33, 0xe2,
	0x7a, 0x64, 0xec, 0x7a, 0x6e, 0x32, 0xc3, 0xf4, 0xc7, 0x29, 0x8d, 0x13, 0xf4, 0x18, 0x1a, 0x24,
	0x74, 0xad, 0x33, 0x1a, 0xc5, 0x6e, 0xe0, 0xb7, 0x0a, 0x4f, 0x0a, 0x4f, 0xcb, 0x18, 0x48, 0xe8,
	0x1e, 0x0b, 0x0a, 0xfa, 0x09, 0x34, 0x93, 0x88, 0xf8, 0x31, 0xb1, 0x13, 0x37, 0xf0, 0x2d, 0xd7,
	0x69, 0x15, 0x9f, 0x14, 0x9e, 0xd6, 0xf1, 0x46, 0x8e, 0xda, 0x75, 0x90, 0x06, 0xb5, 0x24, 0x22,
	0x36, 0x9b, 0xa6, 0x55, 0x7a, 0x52, 0x78, 0xda, 0xd8, 0xff, 0xe9, 0xde, 0x27, 0x17, 0xb6, 0x67,
	0xca, 0xe1, 0x38, 0x13, 0x44, 0x0f, 0xa0, 0x76, 0x1a, 0x24, 0xd4, 0x63, 0xb3, 0xac, 0xf1, 0x59,
	0xaa, 0xbc, 0xdf, 0x75, 0xd0, 0x23, 0x80, 0x38, 0x21, 0x51, 0x62, 0x39, 0x24, 0xa1, 0xad, 0x32,
	0x67, 0xd6, 0x39, 0xa5, 0x43, 0x12, 0xca, 0x24, 0xa9, 0xef, 0x08, 0x66, 0x45, 0x48, 0x52, 0xdf,
	0xe1, 0xac, 0x6f, 0xa1, 0xcc, 0x66, 0x9d, 0xb5, 0xaa, 0x7c, 0x59, 0x4f, 0x97, 0x2c, 0xcb, 0xb0,
	0xed, 0x69, 0x48, 0x7c, 0x7b, 0x86, 0x85, 0x18, 0xda, 0x85, 0x9a, 0x47, 0xfc, 0x93, 0x29, 0x39,
	0xa1, 0xad, 0x1a, 0x87, 0xce, 0xfa, 0x8c, 0x67, 0x4f, 0xa3, 0x88, 0xfa, 0xf6, 0xac, 0x55, 0x17,
	0xbc, 0xb4, 0x8f, 0xbe, 0x84, 0xf5, 0x69, 0x4c, 0x23, 0xcb, 0x0e, 0xa6, 0x7e, 0x12, 0xcd, 0x5a,
	0xc0, 0xf9, 0x0d, 0x46, 0xd3, 0x04, 0x09, 0x51, 0x68, 0x38, 0xf4, 0xcc, 0xb5, 0xa9, 0x95, 0xcc,
	0x42, 0xda, 0x6a, 0x3c, 0x29, 0x3c, 0x6d, 0xee, 0x77, 0x96, 0x2c, 0xf0, 0xea, 0xcb, 0xdc, 0xeb,
	0x70, 0x30, 0x73, 0x16, 0x52, 0x0c, 0x4e, 0xd6, 0x6e, 0x7f, 0x07, 0x30, 0xe7, 0xa0, 0xfb, 0xb0,
	0x35, 0xea, 0xbf, 0xee, 0x1b, 0x3f, 0xf4, 0xad, 0x8e, 0x7e, 0xdc, 0xd5, 0x74, 0xcb, 0x7c, 0x3b,
	0xd0, 0x95, 0x3b, 0xa8, 0x01, 0xd5, 0x8e, 0x3e, 0x7c, 0x6d, 0x1a, 0x03, 0xa5, 0x80, 0x00, 0x2a,
	0x47, 0xc6, 0x41, 0xb7, 0xa7, 0x2b, 0x45, 0xd6, 0x36, 0xd5, 0x83, 0x9e, 0x6e, 0x2a, 0xa5, 0xf6,
	0x6f, 0xca, 0xf0, 0xf0, 0xd2, 0x15, 0xc4, 0x61, 0xe0, 0xc7, 0xf4, 0xd6, 0xf4, 0x29, 0xaf, 0x0a,
	0xa5, 0x4f, 0xa9, 0xc2, 0xda, 0xa7, 0x54, 0xa1, 0x7c, 0x85, 0x2a, 0x54, 0x6e, 0xa6, 0x0a, 0x87,
	0x00, 0x51, 0x10, 0x4c, 0xf8, 0x6d, 0xc5, 0xad, 0xea, 0x93, 0xd2, 0x0a, 0x6a, 0x8e, 0x83, 0x60,
	0xc2, 0x6f, 0xa4, 0x1e, 0xc9, 0x56, 0xcc, 0x71, 0x48, 0x42, 0xad, 0xd0, 0x23, 0x7e, 0xdc, 0xaa,
	0xad, 0x86, 0x43, 0x12, 0x3a, 0xf0, 0x88, 0x8f, 0xeb, 0x91, 0x6c, 0xc5, 0xd9, 0x7a, 0x18, 0x25,
	0x6e, 0xd5, 0x57, 0x5e, 0x0f, 0xc3, 0x12, 0xeb, 0x61, 0xad, 0x18, 0x0d, 0x60, 0x43, 0x1c, 0xb6,
	0x43, 0x13, 0xe2, 0x7a, 0x31, 0xd7, 0xd5, 0xc6, 0xfe, 0xcf, 0x96, 0x40, 0xbd, 0x62, 0x32, 0x1d,
	0x21, 0x82, 0xd7, 0x4f, 0x73, 0x3d, 0xf4, 0x1d, 0xd4, 0xc2, 0xc0, 0x73, 0x6d, 0x97, 0xc6, 0x5c,
	0xad, 0x1b, 0xfb, 0x7b, 0x4b, 0xc0, 0x06, 0xa2, 0x39, 0x90, 0x52, 0x38, 0x93, 0x47, 0x87, 0x50,
	0xa6, 0x51, 0x14, 0x44, 0xad, 0x75, 0x0e, 0xf4, 0x8b, 0x25, 0x40, 0x79, 0xb5, 0xd4, 0x99, 0x1c,
	0x16, 0xe2, 0xed, 0x7f, 0xa8, 0xc3, 0xb6, 0x54, 0xdd, 0xe1, 0x74, 0x3c, 0x71, 0x93, 0xdf, 0x1d,
	0x1f, 0xf8, 0x08, 0xc0, 0x0d, 0x2d, 0xe2, 0x38, 0x11, 0x8d, 0x63, 0xee, 0x08, 0xeb, 0xb8, 0xee,
	0x86, 0xaa, 0x20, 0x7c, 0xd2, 0xc5, 0x69, 0xcc, 0xc5, 0xc5, 0x49, 0x30, 0xa1, 0x11, 0x77, 0x71,
	0xcb, 0x37, 0xa5, 0xc9, 0xe1, 0x38, 0x13, 0x94, 0x27, 0x73, 0x46, 0x3d, 0x1a, 0x49, 0xdd, 0x5a,
	0xe1, 0x64, 0xf8, 0x70, 0x9c, 0x09, 0xa2, 0x0e, 0xd4, 0x33, 0x6d, 0x97, 0x4a, 0xb5, 0xb2, 0xb2,
	0xd7, 0x52, 0x65, 0x47, 0x23, 0xa8, 0x86, 0x64, 0x36, 0xa1, 0x7e, 0x22, 0xf5, 0xe9, 0x97, 0xab,
	0xf9, 0xdb, 0x05, 0x95, 0xd9, 0x1b, 0x08, 0x08, 0x9c, 0x62, 0xed, 0xfe, 0x66, 0x0d, 0xaa, 0x92,
	0x88, 0x5e, 0xc0, 0x1a, 0xf7, 0xe7, 0x05, 0xee, 0xcf, 0xff, 0x70, 0x09, 0xfe, 0xcb, 0x29, 0x89,
	0x88, 0x9f, 0x50, 0xe1, 0xb7, 0xb9, 0x24, 0xfa, 0xbb, 0x02, 0xdc, 0x97, 0xc8, 0x96, 0x4d, 0x22,
	0xc7, 0x0a, 0x49, 0x44, 0x26, 0x34, 0xa1, 0x51, 0xcc, 0x55, 0xaf, 0xb1, 0xff, 0xfd, 0x67, 0xac,
	0x3a, 0xfd, 0xd5, 0x48, 0xe4, 0x0c, 0x32, 0x60, 0xbc, 0x13, 0x5e, 0x46, 0x46, 0x06, 0x6c, 0x8e,
	0x5d, 0xcf, 0x73, 0xfd, 0x93, 0x4c, 0x81, 0x84, 0x72, 0xff, 0xfe, 0x32, 0x43, 0x14, 0xa3, 0x71,
	0x53, 0x8a, 0xcb, 0xfe, 0xee, 0xdf, 0x17, 0x61, 0xe7, 0xd2, 0x15, 0xb0, 0x1b, 0xe6, 0xbb, 0xcd,
	0x9d, 0xde, 0x52, 0x65, 0x23, 0x91, 0xc3, 0x0f, 0xae, 0x66, 0xcb, 0x16, 0x33, 0x67, 0x8e, 0xe2,
	0x4f, 0x27, 0x63, 0x1a, 0x49, 0x53, 0x05, 0x46, 0xea, 0x73, 0x0a, 0xfa, 0x29, 0x6c, 0xb2, 0xde,
	0x69, 0xe0, 0x39, 0x34, 0xb2, 0x7c, 0x32, 0xa1, 0xf2, 0x89, 0x69, 0xce, 0xc9, 0x7d, 0x32, 0xa1,
	0xe8, 0x0f, 0x40, 0xa1, 0x1f, 0x43, 0x37, 0x22, 0xdc, 0xec, 0x27, 0x81, 0x9f, 0x9c, 0x4a, 0x9b,
	0xdc, 0x9c, 0xd3, 0x8f, 0x18, 0x99, 0x61, 0xe6, 0x86, 0xce, 0x28, 0x89, 0xa4, 0x81, 0x36, 0xe7,
	0xe4, 0xb7, 0x94, 0x44, 0x48, 0x81, 0x92, 0x7d, 0x66, 0x4b, 0x03, 0x65, 0xcd, 0xf6, 0xbf, 0x56,
	0x61, 0xe7, 0xdc, 0x75, 0xdd, 0xf2, 0x63, 0x3a, 0x84, 0x4a, 0x9c, 0x90, 0x64, 0x2a, 0x6e, 0xae,
	0x79, 0x5d, 0x95, 0x17, 0xab, 0xd9, 0x1b, 0x72, 0x08, 0x2c, 0xa1, 0xd0, 0x18, 0x1a, 0x11, 0x8d,
	0x69, 0x74, 0xc6, 0xf7, 0xc6, 0xcf, 0xa5, 0xb1, 0xff, 0xe2, 0x46, 0xc8, 0x78, 0x8e, 0x83, 0xf3,
	0xa0, 0xe8, 0x45, 0xea, 0xfa, 0xcb, 0x1c, 0xfd, 0xeb, 0x25, 0xe8, 0x02, 0x36, 0xef, 0xf4, 0x77,
	0xff, 0x65, 0x0d, 0x1a, 0x39, 0x78, 0x34, 0x86, 0xaa, 0x17, 0xd8, 0x24, 0x09, 0x22, 0x7e, 0x9c,
	0x8d, 0xfd, 0x57, 0x9f, 0xbb, 0xe2, 0xbd, 0x9e, 0xc0, 0xc3, 0x29, 0x30, 0x0a, 0xa0, 0x29, 0x5c,
	0xb8, 0x24, 0x30, 0x9b, 0x2d, 0xdd, 0xea, 0x54, 0xe2, 0xb9, 0x96, 0xbd, 0xf8, 0xff, 0xe7, 0xcd,
	0xc8, 0x3b, 0xfe, 0xda, 0x6d, 0x38, 0xfe, 0xfa, 0xad, 0x38, 0x7e, 0xb8, 0xa1, 0xe3, 0xdf, 0xfd,
	0x19, 0x54, 0xe5, 0x81, 0xa1, 0x26, 0x14, 0x5d, 0x87, 0xdf, 0x7f, 0x1d, 0x17, 0x5d, 0x87, 0xd9,
	0x64, 0xe8, 0xfa, 0xd2, 0x76, 0x58, 0xb3, 0xdd, 0x86, 0x8a, 0x50, 0x77, 0x16, 0x15, 0x0f, 0x47,
	0x9a, 0xa6, 0x0f, 0x87, 0x22, 0x44, 0x3e, 0x54, 0xbb, 0xbd, 0x11, 0xd6, 0x95, 0x42, 0xfb, 0xd7,
	0x25, 0xb8, 0x7b, 0x21, 0xd8, 0x40, 0x7f, 0xbe, 0xe0, 0xfc, 0x0f, 0xaf, 0x1b, 0xac, 0x5c, 0xa4,
	0xe4, 0x9e, 0x85, 0x16, 0x54, 0x27, 0x34, 0x8e, 0xd9, 0x33, 0x2d, 0xd6, 0x9a, 0x76, 0xdb, 0x7f,
	0x5b, 0x84, 0x9d, 0x4b, 0x25, 0xd1, 0x5d, 0xd8, 0x48, 0xc3, 0x7d, 0x1d, 0x63, 0x03, 0x2b, 0x77,
	0xd0, 0x43, 0xb8, 0xaf, 0x0e, 0xba, 0xd6, 0xb1, 0x8e, 0x87, 0x5d, 0xa3, 0x6f, 0x8d, 0xfa, 0xc3,
	0xd1, 0x60, 0x60, 0x60, 0x53, 0xef, 0x28, 0x05, 0xb4, 0x0b, 0xf7, 0x3a, 0xaa, 0xa9, 0x5b, 0x43,
	0xbd, 0xa7, 0x6b, 0x26, 0xe3, 0x77, 0xfb, 0xc7, 0x6a, 0xaf, 0xdb, 0x51, 0x8a, 0x68, 0x0b, 0x36,
	0x5f, 0x19, 0xa6, 0xde, 0xb3, 0xfa, 0x86, 0x69, 0x1d, 0x1a, 0xa3, 0x7e, 0x47, 0x29, 0xb1, 0x09,
	0xfa, 0xba, 0xf9, 0x83, 0x81, 0x5f, 0xcb, 0x09, 0xd6, 0xd0, 0x0e, 0xdc, 0xc5, 0xba, 0x66, 0x1c,
	0xeb, 0x98, 0xa5, 0x0d, 0x92, 0x5c, 0x46, 0x2d, 0xd8, 0xc6, 0xfa, 0xf7, 0x23, 0x7d, 0x68, 0x5a,
	0x1d, 0xd5, 0x54, 0x33, 0xe0, 0x0a, 0xba, 0x07, 0x28, 0xe5, 0x74, 0xfb, 0x9a, 0x71, 0x34, 0xe8,
	0xe9, 0xa6, 0xae, 0x54, 0xf3, 0x12, 0x6c, 0xca, 0x81, 0x8a, 0x87, 0x0c, 0x51, 0xa9, 0x21, 0x04,
	0x4d, 0xb6, 0xea, 0x5e, 0x57, 0xc7, 0x12, 0xbf, 0xde, 0xfe, 0x8f, 0x02, 0x54, 0x73, 0x21, 0x8d,
	0x7c, 0xad, 0x9e, 0xc9, 0x8b, 0xce, 0xfa, 0x39, 0xde, 0xbe, 0x3c, 0xc7, 0xac, 0x9f, 0xe3, 0x3d,
	0x97, 0x8f, 0x42, 0xd6, 0x47, 0x08, 0xd6, 0x6c, 0x37, 0x99, 0x49, 0x13, 0xe3, 0x6d, 0x36, 0x3e,
	0x8c, 0x82, 0x33, 0xd7, 0xb7, 0x53, 0xeb, 0xca, 0xfa, 0xcc, 0x7d, 0x87, 0x41, 0x9c, 0x10, 0xcf,
	0xb2, 0x03, 0x27, 0xb5, 0x2f, 0x10, 0x24, 0x2d, 0x70, 0xf8, 0x7d, 0xa6, 0xd9, 0xa1, 0x88, 0xc9,
	0xd2, 0x6e, 0xfb, 0x03, 0x34, 0x0f, 0x48, 0xec, 0xda, 0xea, 0x84, 0xfa, 0x6e, 0xc2, 0xa2, 0xe0,
	0x9f, 0x40, 0xf3, 0x5d, 0x44, 0xa9, 0x35, 0x8e, 0x28, 0x79, 0xff, 0x8e, 0xc4, 0x09, 0xdf, 0x56,
	0x0d, 0x6f, 0x30, 0xea, 0x41, 0x4a, 0x44, 0x0f, 0xa1, 0xce, 0x87, 0x7d, 0x70, 0xdf, 0xb9, 0x7c,
	0x73, 0x35, 0x5c, 0x63, 0x84, 0x1f, 0xdc, 0x77, 0x2e, 0x4b, 0x49, 0x39, 0x33, 0x24, 0x51, 0x16,
	0xa4, 0xd6, 0x70, 0x83, 0xd1, 0x06, 0x82, 0xd4, 0xfe, 0x9b, 0x12, 0x20, 0x8d, 0xf8, 0x36, 0xf5,
	0x3c, 0xee, 0x72, 0x78, 0x3c, 0x3e, 0x43, 0x16, 0x54, 0xe3, 0xe9, 0x64, 0x42, 0xa2, 0x99, 0x54,
	0x6c, 0x7d, 0xe9, 0xbb, 0x7c, 0x1e, 0x63, 0x81, 0x34, 0x14, 0x60, 0x38, 0x45, 0x45, 0xcf, 0x61,
	0xc7, 0xce, 0xf1, 0x2d, 0x87, 0x12, 0xc7, 0x73, 0xfd, 0x54, 0xd1, 0xb7, 0xf3, 0xcc, 0x8e, 0xe4,
	0xa1, 0xbf, 0x82, 0xad, 0xa9, 0x1f, 0x27, 0xd1, 0xd4, 0x4e, 0xa6, 0x11, 0x75, 0x2c, 0x9e, 0x32,
	0xcc, 0x64, 0x78, 0xb2, 0x2c, 0xee, 0xea, 0xb8, 0x71, 0xe8, 0x91, 0xd9, 0x30, 0x89, 0x58, 0x00,
	0x8e, 0xf2, 0x40, 0x62, 0xc1, 0xed, 0x29, 0x6c, 0x5d, 0xb2, 0x66, 0xf4, 0x18, 0x1e, 0xa6, 0x16,
	0xa5, 0xa9, 0x7d, 0x4d, 0xef, 0xf5, 0x54, 0x6e, 0x27, 0x03, 0xa3, 0xd7, 0xd5, 0xde, 0x2a, 0x77,
	0x98, 0xfa, 0x1f, 0x62, 0x5d, 0x5f, 0xe0, 0x2a, 0x05, 0xa6, 0xb2, 0x7d, 0xa3, 0x6f, 0x61, 0xfd,
	0x70, 0xd4, 0xef, 0x70, 0x35, 0x2e, 0x32, 0xda, 0x40, 0xc5, 0x66, 0x57, 0xed, 0x49, 0xba, 0x52,
	0x6a, 0x7f, 0x0b, 0x35, 0x8d, 0x84, 0x84, 0xab, 0xd7, 0x3d, 0xa8, 0x10, 0x67, 0xea, 0x25, 0xb1,
	0x7c, 0xfc, 0x65, 0x8f, 0x17, 0x1e, 0x4e, 0x5d, 0xcf, 0x89, 0xa8, 0x70, 0x5b, 0x65, 0x9c, 0xf5,
	0xdb, 0xff, 0x58, 0x80, 0x5a, 0xea, 0x8a, 0x99, 0xff, 0x7f, 0xe7, 0x46, 0x71, 0x22, 0xc2, 0x1c,
	0x61, 0x09, 0x75, 0x4e, 0xe1, 0x11, 0xce, 0x43, 0xa8, 0x7b, 0x24, 0xe5, 0x16, 0xd3, 0xd0, 0x5f,
	0x32, 0xbf, 0x84, 0xf5, 0xf0, 0x34, 0xf0, 0x69, 0x1a, 0x49, 0x09, 0x7b, 0x68, 0x70, 0x9a, 0x0c,
	0xa5, 0xb6, 0xa1, 0x4c, 0x27, 0xc4, 0xf5, 0xa4, 0x4d, 0x88, 0x4e, 0x5e, 0xaf, 0xcb, 0x8b, 0x7a,
	0xfd, 0x2b, 0xd8, 0x58, 0x38, 0x77, 0x66, 0x53, 0x09, 0xfd, 0x98, 0xc8, 0x95, 0xf1, 0xf6, 0x42,
	0x3a, 0x52, 0x5c, 0x4c, 0x47, 0xda, 0xff, 0xbb, 0x06, 0xeb, 0xf9, 0xbc, 0x93, 0x01, 0xe4, 0xb6,
	0xc6, 0xdb, 0xe8, 0x05, 0x54, 0xd3, 0x50, 0xb5, 0x78, 0xad, 0x50, 0x35, 0x15, 0x43, 0x6f, 0xa1,
	0x71, 0x42, 0x03, 0xfe, 0x7e, 0xb3, 0xe0, 0x46, 0x68, 0xd4, 0x1f, 0x5d, 0x23, 0x1f, 0xde, 0x7b,
	0x39, 0x17, 0xc7, 0x79, 0xac, 0x0b, 0xa7, 0xba, 0x76, 0xf1, 0x54, 0x47, 0xb9, 0xec, 0x59, 0x44,
	0x3e, 0x7f, 0x72, 0x9d, 0xa9, 0x79, 0xe7, 0x92, 0x44, 0xfa, 0x4f, 0xa1, 0x12, 0x9e, 0x06, 0x49,
	0x10, 0xb7, 0x2a, 0x3c, 0x1e, 0xf9, 0x6a, 0x59, 0x4a, 0xce, 0x06, 0x63, 0x29, 0x33, 0xbf, 0xea,
	0x6a, 0xfe, 0xaa, 0xbf, 0x84, 0xf5, 0xd3, 0x60, 0x42, 0x43, 0x72, 0x42, 0xad, 0x69, 0xe4, 0xc9,
	0xf4, 0xb1, 0x91, 0xd2, 0x46, 0x91, 0xb7, 0xfb, 0x12, 0x1a, 0xb9, 0xc3, 0x10, 0xb7, 0x9b, 0xb8,
	0xc9, 0xd4, 0x11, 0x97, 0x56, 0xc0, 0x59, 0x1f, 0x7d, 0x01, 0x75, 0x2f, 0xf0, 0x4f, 0x04, 0xb3,
	0xc8, 0x99, 0x73, 0xc2, 0xee, 0x5f, 0xc3, 0xc6, 0xc2, 0xd6, 0x50, 0x1b, 0x36, 0xec, 0x53, 0x6a,
	0xbf, 0xb7, 0x5c, 0xdf, 0x4a, 0xdc, 0x4c, 0x09, 0x1a, 0x9c, 0xd8, 0xf5, 0x4d, 0x77, 0x42, 0xd1,
	0x57, 0xd0, 0x14, 0x63, 0x82, 0x69, 0x22, 0x06, 0x09, 0x95, 0x5a, 0xe7, 0x54, 0x63, 0x9a, 0xf0,
	0x51, 0x6d, 0xd8, 0x98, 0x90, 0x8f, 0x16, 0xb7, 0x21, 0x8b, 0xe9, 0x5d, 0x89, 0x1b, 0x55, 0x63,
	0x42, 0x3e, 0x6a, 0x8c, 0xa6, 0x9e, 0xd0, 0xf6, 0xaf, 0xa0, 0x9e, 0x55, 0x84, 0x56, 0x34, 0xcc,
	0xd2, 0x82, 0x61, 0xfe, 0xb6, 0x08, 0x9b, 0xe7, 0xca, 0x1c, 0xe8, 0x2f, 0x61, 0x9d, 0x27, 0x2b,
	0x41, 0xc8, 0x0e, 0x87, 0xa1, 0x95, 0x56, 0xb8, 0xee, 0x73, 0x28, 0x3c, 0x0b, 0x32, 0x42, 0xa1,
	0x6b, 0x76, 0xd6, 0x8e, 0x11, 0x81, 0x9d, 0x8b, 0x0e, 0x92, 0x69, 0x55, 0xf1, 0x06, 0x2e, 0x72,
	0xfb, 0x82, 0x8b, 0x74, 0x69, 0xbc, 0x3b, 0x05, 0x98, 0xcf, 0x7e, 0x4b, 0x19, 0xdc, 0x97, 0xb0,
	0x6e, 0x9f, 0xd9, 0x56, 0x44, 0x7f, 0x9c, 0xba, 0x11, 0x75, 0xe4, 0x3b, 0xd6, 0xb0, 0xcf, 0x6c,
	0x2c, 0x49, 0x6d, 0x17, 0xca, 0x5c, 0x3d, 0x59, 0xec, 0xc6, 0xf4, 0x4e, 0xdc, 0x3c, 0x6b, 0xa2,
	0x3e, 0x34, 0x1c, 0x1a, 0xdb, 0x91, 0xcb, 0x97, 0x74, 0xa3, 0xad, 0xe6, 0x01, 0xda, 0xbf, 0x84,
	0xf2, 0x20, 0x72, 0x6d, 0xca, 0xef, 0x7c, 0xc2, 0x1c, 0x19, 0x9f, 0xad, 0x88, 0x65, 0x6f, 0xa1,
	0x0a, 0x5c, 0x5c, 0xac, 0x02, 0xb7, 0xff, 0x69, 0x0d, 0x6a, 0x69, 0xe9, 0x8e, 0x07, 0x10, 0x81,
	0x93, 0xf9, 0x2a, 0xd6, 0x46, 0x2f, 0xa4, 0xff, 0xba, 0xc9, 0x32, 0x85, 0xb7, 0x3b, 0xb7, 0xdf,
	0xd2, 0x67, 0xee, 0x17, 0x1d, 0xc3, 0xe6, 0x98, 0xc5, 0x1e, 0x16, 0x49, 0x83, 0x0f, 0x99, 0xdc,
	0xfd, 0x7c, 0x59, 0xfe, 0xb2, 0x10, 0xb1, 0xe0, 0xe6, 0x78, 0x31, 0x82, 0x19, 0x42, 0xf3, 0x24,
	0xad, 0x75, 0x08, 0x05, 0x29, 0xdf, 0xa0, 0x40, 0xb2, 0x71, 0x92, 0xef, 0xa2, 0x31, 0x6c, 0x2d,
	0xc4, 0x0d, 0x32, 0x04, 0x10, 0x05, 0xde, 0x67, 0xd7, 0x0e, 0x52, 0x30, 0xb2, 0x2f, 0x06, 0x3f,
	0x57, 0x5a, 0x91, 0xa8, 0x00, 0xdf, 0x82, 0x15, 0xb5, 0x7f, 0x0b, 0x50, 0x4b, 0x73, 0x96, 0x4b,
	0xd5, 0xe4, 0x2b, 0x68, 0x66, 0xa5, 0x67, 0x11, 0x4e, 0x4a, 0x37, 0x96, 0x56, 0x95, 0xb5, 0x74,
	0x54, 0x5a, 0x58, 0x16, 0xa3, 0x4a, 0x72, 0x94, 0x54, 0x41, 0x3e, 0xca, 0x86, 0x07, 0x13, 0xf2,
	0xd1, 0x9d, 0x4c, 0x27, 0x16, 0xf1, 0xbc, 0xe0, 0x03, 0x75, 0xac, 0x20, 0x75, 0x6c, 0xf2, 0xaa,
	0x97, 0x1b, 0xad, 0x08, 0x50, 0xf0, 0x7d, 0x89, 0xa4, 0x0a, 0xa0, 0xb9, 0x83, 0x7c, 0x0b, 0xf7,
	0x92, 0x80, 0xc5, 0xbe, 0x21, 0xb3, 0x1d, 0x8b, 0x24, 0x96, 0x84, 0x91, 0x2f, 0xda, 0xd2, 0xc7,
	0x87, 0x89, 0xe1, 0x2d, 0x8e, 0xc1, 0xdb, 0x6a, 0x22, 0xf3, 0x63, 0xf4, 0x17, 0x70, 0xff, 0x1c,
	0x34, 0xf7, 0xe5, 0xc1, 0x34, 0x91, 0xf7, 0xbe, 0x1a, 0xf6, 0x76, 0x1e, 0x5b, 0x93, 0x08, 0xc8,
	0x00, 0x60, 0xb1, 0xa5, 0xe5, 0x26, 0x74, 0x92, 0xde, 0xf0, 0x2f, 0x56, 0xcc, 0x36, 0xf7, 0x7a,
	0xae, 0x4f, 0xbb, 0x09, 0x9d, 0xe0, 0xba, 0x27, 0x5b, 0x31, 0x3a, 0x81, 0x05, 0x9d, 0xb2, 0xa2,
	0xa9, 0x47, 0xd3, 0xa2, 0xff, 0x1f, 0xaf, 0x0a, 0x9c, 0xd7, 0x54, 0x3c, 0xf5, 0x28, 0xbe, 0x6b,
	0x9f, 0xa3, 0xc4, 0x57, 0x45, 0xc3, 0xf5, 0xdb, 0x89, 0x86, 0x79, 0xdc, 0x22, 0xc6, 0x5b, 0x0e,
	0x49, 0x48, 0x0b, 0x9e, 0x94, 0x78, 0xdc, 0x22, 0x68, 0x1d, 0x92, 0x10, 0x16, 0x6c, 0x72, 0x25,
	0xe5, 0xd1, 0x1e, 0x2f, 0xd1, 0x96, 0xc5, 0x67, 0x06, 0xfe, 0xc1, 0x6b, 0xf7, 0x7f, 0x4a, 0x50,
	0x4b, 0x4f, 0x08, 0x7d, 0x03, 0x65, 0x7e, 0x7d, 0xb2, 0x0c, 0xb3, 0xda, 0x95, 0x09, 0x11, 0xf4,
	0xbd, 0xcc, 0xb1, 0x8b, 0xdc, 0x7f, 0xfc, 0xd9, 0x75, 0x6f, 0x27, 0x6b, 0xe4, 0x52, 0xeb, 0xa7,
	0xa0, 0x84, 0xc4, 0x75, 0x16, 0x94, 0x49, 0xa4, 0x47, 0x4d, 0x46, 0xcf, 0x29, 0xc8, 0x39, 0x77,
	0xbb, 0xf6, 0xb9, 0xcf, 0xcb, 0x7f, 0x15, 0x60, 0x3d, 0xbf, 0x20, 0xb4, 0x01, 0xf5, 0x03, 0x75,
	0xa8, 0x5b, 0x58, 0x35, 0x75, 0xe5, 0x0e, 0x4b, 0xc8, 0xd3, 0x74, 0xc3, 0x54, 0xdf, 0xe8, 0x43,
	0x4b, 0xed, 0x77, 0xac, 0x43, 0x5d, 0x1f, 0x2a, 0x85, 0x7c, 0x72, 0xcf, 0x79, 0x4a, 0x91, 0x91,
	0x4c, 0xf5, 0x8d, 0x75, 0x34, 0xea, 0x77, 0xb5, 0xee, 0x40, 0xed, 0x29, 0x25, 0xd4, 0x80, 0x2a,
	0x23, 0x1d, 0xab, 0xa6, 0xb2, 0xc6, 0xd0, 0x59, 0xc7, 0x30, 0x5f, 0xe9, 0x2c, 0x27, 0x57, 0x60,
	0x3d, 0x45, 0xe0, 0x98, 0x15, 0xb4, 0x09, 0x8d, 0x43, 0x5d, 0xb7, 0x0e, 0x0c, 0xe3, 0x75, 0xb7,
	0xff, 0x52, 0xa9, 0x32, 0x09, 0x46, 0xe0, 0x99, 0xbf, 0x52, 0x43, 0x4d, 0x00, 0xd6, 0xc5, 0xfa,
	0xd0, 0xc0, 0xa6, 0x52, 0x67, 0x08, 0xac, 0x6f, 0x62, 0xb5, 0x3f, 0x3c, 0xd4, 0xb1, 0x02, 0xa9,
	0x80, 0x98, 0xa2, 0xb1, 0xeb, 0x83, 0x72, 0x5e, 0x7d, 0xd9, 0x93, 0x99, 0x65, 0x78, 0x32, 0x3d,
	0x4f, 0xfb, 0xe8, 0x5b, 0xa8, 0x86, 0xd4, 0x27, 0x5e, 0x32, 0x93, 0x8f, 0xe2, 0x6a, 0xba, 0x91,
	0x0a, 0xb5, 0xff, 0xbb, 0x22, 0x7c, 0x29, 0x3f, 0xcc, 0xdf, 0xed, 0x27, 0x77, 0x1e, 0xf1, 0x97,
	0x6f, 0x10, 0xf1, 0x6b, 0x50, 0xb3, 0xa5, 0x9f, 0x97, 0x8e, 0x75, 0xe5, 0x67, 0x21, 0x13, 0x44,
	0x47, 0x50, 0x1f, 0x53, 0x27, 0xfb, 0x64, 0x5a, 0x58, 0xd1, 0x9d, 0xb2, 0xcb, 0xdb, 0x3b, 0xa0,
	0x3c, 0x1e, 0x8c, 0x71, 0x6d, 0x2c, 0x5b, 0x57, 0x39, 0xb9, 0xda, 0xed, 0x38, 0xb9, 0xdd, 0x7f,
	0x2e, 0x42, 0x2d, 0x9d, 0x95, 0xb9, 0x33, 0xf1, 0xce, 0x8c, 0xa9, 0x93, 0xc6, 0xf9, 0x75, 0x4e,
	0x39, 0xa0, 0x4e, 0xcc, 0x72, 0x67, 0x36, 0x81, 0xe0, 0xca, 0x24, 0x9c, 0x11, 0x38, 0xf3, 0x11,
	0xc0, 0x8f, 0x53, 0x4a, 0x7d, 0xc1, 0x15, 0xd9, 0x44, 0x9d, 0x53, 0x38, 0xfb, 0x31, 0x34, 0x9c,
	0x60, 0x3a, 0xf6, 0xa8, 0xe0, 0xaf, 0x89, 0xca, 0xbe, 0x20, 0xf1, 0x01, 0x3f, 0x87, 0xad, 0xd8,
	0xf5, 0x4f, 0x3c, 0x6a, 0x05, 0x91, 0x95, 0x7c, 0x70, 0x25, 0x50, 0x99, 0x0f, 0x54, 0x04, 0xcb,
	0x88, 0xcc, 0x0f, 0x6e, 0x86, 0x37, 0x99, 0x46, 0xe1, 0xe9, 0x4c, 0x0c, 0xab, 0x08, 0x3c, 0x41,
	0x4a, 0x17, 0x1b, 0x07, 0xef, 0x88, 0x60, 0x57, 0xc5, 0x62, 0x19, 0x21, 0x65, 0x8e, 0xa7, 0xfe,
	0x7b, 0xc1, 0xac, 0x09, 0x26, 0x23, 0xa4, 0x3b, 0x09, 0x92, 0x53, 0x1a, 0x09, 0x6e, 0x5d, 0xec,
	0x84, 0x53, 0x18, 0xbb, 0xfd, 0x6f, 0x55, 0x68, 0xe4, 0xea, 0xee, 0xa8, 0xbf, 0x50, 0xff, 0xfc,
	0x66, 0xf5, 0x8a, 0x7d, 0xbe, 0xbd, 0x52, 0xcd, 0xf3, 0xdf, 0x2b, 0xb0, 0x79, 0x4e, 0xe6, 0xda,
	0xd5, 0xce, 0x1d, 0xb8, 0xab, 0xbd, 0xd2, 0xb5, 0xd7, 0xdd, 0xbe, 0x65, 0x1a, 0x86, 0xa5, 0xf5,
	0x8c, 0xa1, 0xae, 0x14, 0xd1, 0x03, 0xd8, 0xd1, 0x46, 0x43, 0xd3, 0x38, 0xd2, 0xb1, 0xd5, 0x57,
	0x8f, 0xf4, 0xac, 0x54, 0x59, 0xfa, 0x44, 0x7d, 0x94, 0xd7, 0x3d, 0x3b, 0xa3, 0x41, 0xaf, 0xab,
	0xb1, 0x01, 0xa9, 0x03, 0x2d, 0x5f, 0x56, 0x36, 0xad, 0x5c, 0x2c, 0x9b, 0x56, 0xd1, 0xef, 0xc1,
	0xe3, 0x81, 0xfa, 0xf6, 0x48, 0xef, 0x9b, 0xd6, 0x41, 0xb7, 0xd7, 0xeb, 0xf6, 0x5f, 0x5a, 0x6a,
	0xa7, 0x83, 0xf5, 0xe1, 0x30, 0x9b, 0xa3, 0x86, 0x9e, 0xc2, 0x57, 0xe9, 0x20, 0x4d, 0xc5, 0x1d,
	0xfe, 0xe7, 0x95, 0xd1, 0xeb, 0x9c, 0x5f, 0x69, 0x1d, 0x7d, 0x01, 0xad, 0xc5, 0x91, 0xc7, 0x5a,
	0xc6, 0x85, 0xfc, 0x64, 0x9c, 0xab, 0xbf, 0x19, 0x74, 0xb1, 0xba, 0xb0, 0xa1, 0x06, 0x7a, 0x0c,
	0x0f, 0x17, 0x06, 0xf5, 0x47, 0x47, 0x07, 0x3a, 0xce, 0x06, 0xac, 0x5f, 0x40, 0x31, 0xdf, 0x0e,
	0x74, 0xbe, 0xcd, 0xf9, 0x21, 0x6f, 0xa0, 0x6d, 0x50, 0xd2, 0x41, 0x1d, 0x5d, 0xeb, 0x75, 0xfb,
	0x7a, 0x47, 0x69, 0xb2, 0x53, 0x49, 0xa9, 0x29, 0xde, 0x26, 0x6a, 0xc1, 0xf6, 0x9c, 0x38, 0x1c,
	0x1d, 0x1e, 0x76, 0xb5, 0xae, 0xde, 0x37, 0x15, 0x85, 0x5d, 0x63, 0xca, 0x19, 0x60, 0x43, 0xd3,
	0x87, 0x43, 0x23, 0xad, 0xfc, 0xde, 0x45, 0x8f, 0xe0, 0x41, 0xca, 0xcc, 0x56, 0xa0, 0x6a, 0x9a,
	0x3e, 0x60, 0x0b, 0x40, 0xec, 0x3a, 0xd9, 0x63, 0x6a, 0x0d, 0x7a, 0x2a, 0x53, 0x00, 0xf5, 0x58,
	0xed, 0xf6, 0x78, 0x01, 0x6e, 0xeb, 0xf2, 0x52, 0xf5, 0xf6, 0x95, 0xa5, 0xea, 0x9d, 0x2b, 0x4a,
	0xd5, 0xf7, 0xae, 0x2c, 0x55, 0xdf, 0xe7, 0x12, 0x86, 0x71, 0xc4, 0xdf, 0x73, 0xeb, 0xa8, 0x3b,
	0x3c, 0x52, 0x4d, 0xed, 0x95, 0xd2, 0x62, 0xf7, 0x33, 0xa7, 0x0f, 0x70, 0x57, 0xcb, 0x71, 0x1f,
	0xf0, 0x35, 0x67, 0xdc, 0xfc, 0x9a, 0x77, 0x33, 0x16, 0xdf, 0x6a, 0x9e, 0xf5, 0x90, 0xb1, 0x4c,
	0xac, 0x1e, 0xeb, 0xbd, 0xf3, 0xea, 0xf0, 0xc5, 0x25, 0x15, 0xf3, 0x47, 0xed, 0x0e, 0xd4, 0xd2,
	0x7f, 0x41, 0x10, 0x9f, 0x4d, 0x27, 0x21, 0x71, 0x4f, 0xf8, 0x87, 0xc4, 0x42, 0xfa, 0xd9, 0x54,
	0x90, 0xba, 0x0e, 0xba, 0x0f, 0xd5, 0x30, 0x88, 0x79, 0x95, 0x47, 0x58, 0x62, 0x25, 0x0c, 0xe2,
	0x51, 0xe4, 0xb5, 0x7f, 0x5d, 0xe0, 0x30, 0xe2, 0x63, 0xcd, 0xe7, 0x14, 0x1c, 0x0f, 0xa1, 0x3e,
	0x4f, 0x44, 0x4a, 0xd7, 0xfc, 0x1f, 0x9d, 0xb9, 0xe8, 0xd7, 0xdf, 0x40, 0x2d, 0xad, 0x2a, 0xa0,
	0x0a, 0x14, 0xd5, 0x37, 0xca, 0x1d, 0xf6, 0xdb, 0xd1, 0x94, 0x02, 0xff, 0x65, 0x71, 0x52, 0x05,
	0x8a, 0xdf, 0x69, 0x4a, 0x89, 0xfd, 0x1e, 0x69, 0xca, 0x1a, 0xfb, 0x3d, 0xee, 0x2a, 0xe5, 0xaf,
	0x9f, 0xc3, 0xc6, 0x42, 0xc2, 0xc9, 0xe2, 0x9b, 0xbe, 0x61, 0xbd, 0x1c, 0xa9, 0x58, 0xed, 0x9b,
	0x3a, 0x8b, 0xc8, 0x14, 0x58, 0xcf, 0x2b, 0xbd, 0x52, 0x18, 0x57, 0xf8, 0xbf, 0xe2, 0x3d, 0xff,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x1a, 0x97, 0xa1, 0x96, 0x27, 0x00, 0x00,
}
